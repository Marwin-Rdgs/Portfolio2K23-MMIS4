import { FormKitExtendableSchemaRoot } from '@formkit/core';
import { FormKitLibrary } from '@formkit/core';
import { FormKitMiddleware } from '@formkit/core';
import { FormKitNode } from '@formkit/core';
import { FormKitPlugin } from '@formkit/core';
import { FormKitSchemaAttributes } from '@formkit/core';
import { FormKitSchemaComponent } from '@formkit/core';
import { FormKitSchemaComposable } from '@formkit/core';
import { FormKitSchemaCondition } from '@formkit/core';
import { FormKitSchemaDOMNode } from '@formkit/core';
import { FormKitSchemaFormKit } from '@formkit/core';
import { FormKitSchemaNode } from '@formkit/core';
import { FormKitTypeDefinition } from '@formkit/core';

/**
 * Applies attributes to a given schema section by applying a higher order
 * function that merges a given set of attributes into the node.
 * @param attrs - Apply attributes to a FormKitSchemaExtendableSection
 * @param section - A section to apply attributes to
 * @returns
 * @public
 */
export declare function $attrs(attrs: FormKitSchemaAttributes | (() => FormKitSchemaAttributes), section: FormKitSchemaExtendableSection): FormKitSchemaExtendableSection;

/**
 * Extends a schema node with a given set of extensions.
 * @param section - A section to apply an extension to.
 * @param extendWith - A partial schema snippet to apply to the section.
 * @returns
 * @public
 */
export declare function $extend(section: FormKitSchemaExtendableSection, extendWith: Partial<FormKitSchemaNode>): FormKitSchemaExtendableSection;

/**
 * Applies a condition to a given schema section.
 * @param varName - The name of the variable that holds the current instance.
 * @param inName - The variable we are iterating over.
 * @param section - A section to repeat
 * @returns
 * @public
 */
export declare function $for(varName: string, inName: string, section: FormKitSchemaExtendableSection): (extensions: Record<string, Partial<FormKitSchemaNode>>) => FormKitSchemaNode;

/**
 *
 * @param condition - A schema condition to apply to a section.
 * @param then - The section that applies if the condition is true.
 * @param otherwise - (else) The section that applies if the condition is false.
 * @returns
 * @public
 */
export declare function $if(condition: string, then: FormKitSchemaExtendableSection, otherwise?: FormKitSchemaExtendableSection): FormKitSchemaExtendableSection;

/**
 * Creates a root schema section.
 * @param section - A section to make a root from.
 * @returns
 * @public
 */
export declare function $root(section: FormKitSchemaExtendableSection): FormKitExtendableSchemaRoot;

/**
 * @public
 */
export declare const actions: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare const box: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare const boxHelp: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare const boxLabel: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare const boxOption: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare const boxOptions: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare const boxWrapper: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * Input definition for a button.
 * @public
 */
declare const button: FormKitTypeDefinition;
export { button }
export { button as submit }

/**
 * @public
 */
export declare const buttonInput: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare const buttonLabel: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * Input definition for a checkbox(ess).
 * @public
 */
export declare const checkbox: FormKitTypeDefinition;

/**
 * Adds checkbox selection support
 * @param node - Node the feature is added to
 * @public
 */
export declare function checkboxes(node: FormKitNode): void;

/**
 * ================================================================
 * NOTE: This function is deprecated. Use `createSection` instead!
 * ================================================================
 *
 * @param key - A new section key name.
 * @param schema - The default schema in this composable slot.
 * @returns
 * @public
 */
export declare function composable(key: string, schema: FormKitInputSchema): FormKitSchemaComposable;

/**
 *
 * @param libraries - One or many formkit urls.
 * @returns
 * @public
 */
export declare function createLibraryPlugin(...libraries: FormKitLibrary[]): FormKitPlugin;

/**
 * @public
 */
export declare function createSection(section: string, el: string | null | (() => FormKitSchemaNode), root: true): FormKitSection<FormKitExtendableSchemaRoot>;

/**
 * @public
 */
export declare function createSection(section: string, el: string | null | (() => FormKitSchemaNode)): FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare function createSection(section: string, el: string | (() => FormKitSchemaNode), root: false): FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare const decorator: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @param sectionKey - the location the icon should be loaded
 * @param defaultIcon - the icon that should be loaded if a match is found in the user's CSS
 * @public
 */
export declare function defaultIcon(sectionKey: string, defaultIcon: string): (node: FormKitNode) => void;

/**
 * Allows disabling children of this.
 * @param node - The FormKitNode of the form/group/list
 * @public
 */
export declare function disablesChildren(node: FormKitNode): void;

/**
 * Extends a single schema node with an extension. The extension can be any partial node including strings.
 * @param schema - Extend a base schema node.
 * @param extension - The values to extend on the base schema node.
 * @returns
 * @public
 */
export declare function extendSchema(schema: FormKitSchemaNode, extension?: Partial<FormKitSchemaNode>): FormKitSchemaNode;

/**
 * @public
 */
export declare const fieldset: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * Input definition for a file input.
 * @public
 */
export declare const file: FormKitTypeDefinition;

/**
 * @public
 */
export declare const fileInput: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare const fileItem: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare const fileList: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare const fileName: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare const fileRemove: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * Feature to add file handling support to an input.
 * @param node - The node being checked
 * @public
 */
export declare function files(node: FormKitNode): void;

/**
 * Input definition for a form.
 * @public
 */
export declare const form: FormKitTypeDefinition;

/**
 * @public
 */
export declare const formInput: FormKitSection<FormKitExtendableSchemaRoot>;

/**
 * A single file object in FormKitâ€™s synthetic "FileList".
 * @public
 */
export declare interface FormKitFile {
    name: string;
    file?: File;
}

/**
 * A synthetic array-based "FileList".
 * @public
 */
export declare type FormKitFileValue = FormKitFile[];

/**
 * Either a schema node, or a function that returns a schema node.
 * @public
 */
export declare type FormKitInputSchema = ((children?: string | FormKitSchemaNode[] | FormKitSchemaCondition) => FormKitSchemaNode) | FormKitSchemaNode;

/**
 * Options should always be formatted as an array of objects with label and value
 * properties.
 * @public
 */
export declare interface FormKitOptionsItem {
    label: string;
    value: unknown;
    attrs?: {
        disabled?: boolean;
    } & Record<string, any>;
    __original?: any;
    [index: string]: any;
}

/**
 * An array of option items.
 * @public
 */
export declare type FormKitOptionsList = FormKitOptionsItem[];

/**
 * The types of options that can be passed to the options prop.
 * @public
 */
export declare type FormKitOptionsProp = FormKitOptionsPropExtensions[keyof FormKitOptionsPropExtensions];

/**
 * Allows for prop extensions to be defined by using an interface whose keys
 * are ignored, but values are applied to a union type. This allows for any
 * third party code to extend the options prop by using module augmentation
 * to add new values to the union type.
 * @public
 */
export declare interface FormKitOptionsPropExtensions {
    arrayOfStrings: string[];
    arrayOfNumbers: number[];
    optionsList: FormKitOptionsList;
    valueLabelPojo: Record<string | number, string>;
}

/**
 * A function that is called with an extensions argument and returns a valid
 * schema node.
 * @public
 */
export declare interface FormKitSchemaExtendableSection {
    (extensions: Record<string, Partial<FormKitSchemaNode>>): FormKitSchemaNode;
}

/**
 * A function that when called, returns a function that can in turn be called
 * with an extension parameter.
 * @public
 */
export declare interface FormKitSection<T = FormKitSchemaExtendableSection> {
    (...children: Array<FormKitSchemaExtendableSection | string>): T;
}

/**
 * The synthetic prop types.
 * @public
 */
export declare type FormKitSyntheticProps = {
    [Property in keyof FormKitSyntheticPropsExtensions]: FormKitSyntheticPropsExtensions[Property];
};

/**
 * Synthetic props are props that are not explicitly declared as props, but
 * should be treated as props to the outside world.
 * @public
 */
export declare interface FormKitSyntheticPropsExtensions {
    /**
     * HTML Attribute, read more here: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#accept
     */
    accept: string;
    actions: boolean;
    action: string;
    label: string;
    method: string;
    ignore: string | boolean;
    enctype: string;
    options: FormKitOptionsProp;
    help: string;
    min: string | number;
    max: string | number;
    step: string | number;
    multiple: string | boolean;
    disabled: string | boolean;
    preserve: string | boolean;
    preserveErrors: string | boolean;
}

/**
 * Converts the options prop to usable values.
 * @param node - A formkit node.
 * @public
 */
export declare function forms(node: FormKitNode): void;

/**
 * @public
 */
export declare const fragment: FormKitSection<FormKitExtendableSchemaRoot>;

/**
 * Input definition for a group.
 * @public
 */
export declare const group: FormKitTypeDefinition;

/**
 * @public
 */
export declare const help: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * Input definition for a hidden input.
 * @public
 */
export declare const hidden: FormKitTypeDefinition;

/**
 * @public
 */
export declare const icon: (sectionKey: string, el?: string | undefined) => FormKitSchemaExtendableSection;

/**
 * Applies ignore="true" by default.
 * @param node - The node
 * @public
 */
export declare function ignores(node: FormKitNode): void;

/**
 * Ensures the input has an `initialValue` prop.
 * @param node - The node being given an initial value
 * @public
 */
export declare function initialValue(node: FormKitNode): void;

/**
 * @public
 */
export declare const inner: FormKitSection<FormKitSchemaExtendableSection>;

declare namespace inputs {
    export {
        button,
        button as submit,
        checkbox,
        file,
        form,
        group,
        hidden,
        list,
        radio,
        select,
        textarea,
        text,
        text as color,
        text as date,
        text as datetimeLocal,
        text as email,
        text as month,
        text as number,
        text as password,
        text as search,
        text as tel,
        text as time,
        text as url,
        text as week,
        text as range
    }
}
export { inputs }

/**
 * Type guard for schema objects.
 * @param schema - returns true if the node is a schema node but not a string or conditional.
 * @public
 */
export declare function isSchemaObject(schema: Partial<FormKitSchemaNode>): schema is FormKitSchemaDOMNode | FormKitSchemaComponent | FormKitSchemaFormKit;

/**
 * Checks if the current schema node is a slot condition like:
 * ```js
 * {
 *  if: '$slot.name',
 *  then: '$slot.name',
 *  else: []
 * }
 * ```
 * @param node - a schema node
 * @returns
 * @public
 */
export declare function isSlotCondition(node: FormKitSchemaNode): node is {
    if: string;
    then: string;
    else: FormKitSchemaNode | FormKitSchemaNode[];
};

/**
 * @public
 */
export declare const label: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare const legend: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * Input definition for a list.
 * @public
 */
export declare const list: FormKitTypeDefinition;

/**
 * Creates a new feature that generates a localization message of type ui
 * for use on a given component.
 *
 * @param key - The key of the message
 * @param value - The value of the message
 * @returns
 * @public
 */
export declare function localize(key: string, value?: string): (node: FormKitNode) => void;

/**
 * @public
 */
export declare const message: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare const messages: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare const noFiles: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * Normalize the boxes.
 * @param node - The node
 * @returns
 * @public
 */
export declare function normalizeBoxes(node: FormKitNode): FormKitMiddleware<{
    prop: string | symbol;
    value: any;
}>;

/**
 * Accepts an array of objects, array of strings, or object of key-value pairs.
 * and returns an array of objects with value and label properties.
 * @param options - Options to normalize
 * @public
 */
export declare function normalizeOptions(options: FormKitOptionsProp): FormKitOptionsList;

/**
 * @public
 */
export declare const option: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * Converts the options prop to usable values.
 * @param node - A formkit node.
 * @public
 */
export declare function options(node: FormKitNode): void;

/**
 * @public
 */
export declare const optionSlot: FormKitSchemaExtendableSection;

/**
 * @public
 */
export declare const outer: FormKitSection<FormKitExtendableSchemaRoot>;

/**
 * @public
 */
export declare const prefix: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * Input definition for a radio.
 * @public
 */
export declare const radio: FormKitTypeDefinition;

/**
 * Determines if a given radio input is being evaluated.
 * @param node - The radio input group.
 * @public
 */
export declare function radios(node: FormKitNode): void;

/**
 * Input definition for a select.
 * @public
 */
export declare const select: FormKitTypeDefinition;

/**
 * @public
 */
export declare const selectInput: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * Converts the options prop to usable values.
 * @param node - A formkit node.
 * @public
 */
export declare function selects(node: FormKitNode): void;

/**
 * @public
 */
export declare const submitInput: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare const suffix: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * Input definition for a text.
 * @public
 */
declare const text: FormKitTypeDefinition;
export { text as color }
export { text as date }
export { text as datetimeLocal }
export { text as email }
export { text as month }
export { text as number }
export { text as password }
export { text as range }
export { text as search }
export { text as tel }
export { text }
export { text as time }
export { text as url }
export { text as week }

/**
 * Input definition for a textarea.
 * @public
 */
export declare const textarea: FormKitTypeDefinition;

/**
 * @public
 */
export declare const textareaInput: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * @public
 */
export declare const textInput: FormKitSection<FormKitSchemaExtendableSection>;

/**
 * Creates an input schema with all of the wrapping base schema.
 * @param inputSchema - Content to store in the input section key location.
 * @public
 */
export declare function useSchema(inputSection: FormKitSection): FormKitExtendableSchemaRoot;

/**
 * @public
 */
export declare const wrapper: FormKitSection<FormKitSchemaExtendableSection>;

export { }
