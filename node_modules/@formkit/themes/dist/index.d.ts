import { FormKitClasses } from '@formkit/core';
import { FormKitNode } from '@formkit/core';

/**
 * Returns a function responsible for loading an icon by name
 * @param iconLoader - a function for loading an icon when it's not found in the iconRegistry
 * @public
 */
export declare function createIconHandler(iconLoader?: FormKitIconLoader, iconLoaderUrl?: FormKitIconLoaderUrl): FormKitIconLoader;

/**
 * Creates the theme plugin based on a given theme name
 * @param theme - The name or id of the theme to apply
 * @param icons - Icons you want to add to the global icon registry
 * @param iconLoader - A function that handles loading an icon when it is not found in the registry
 * @public
 */
export declare function createThemePlugin(theme?: string, icons?: Record<string, string | undefined>, iconLoaderUrl?: FormKitIconLoaderUrl, iconLoader?: FormKitIconLoader): (node: FormKitNode) => any;

/**
 * A function that returns an icon SVG string
 * @public
 */
export declare interface FormKitIconLoader {
    (iconName: string): string | undefined | Promise<string | undefined>;
}

/**
 * A function that returns a remote url for retrieving an SVG icon by name
 * @public
 */
export declare interface FormKitIconLoaderUrl {
    (iconName: string): string | undefined;
}

/**
 * A function to generate FormKit class functions from a javascript object
 * @param classes - An object of input types with nested objects of sectionKeys and class lists
 * @returns FormKitClassFunctions
 * @public
 */
export declare function generateClasses(classes: Record<string, Record<string, string>>): Record<string, string | FormKitClasses | Record<string, boolean>>;

/**
 * The FormKit icon Registry - a global record of loaded icons.
 * @public
 */
export declare const iconRegistry: Record<string, string | undefined>;

export { }
