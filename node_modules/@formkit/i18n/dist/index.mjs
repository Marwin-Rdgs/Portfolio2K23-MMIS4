import { has } from '@formkit/utils';

/**
 * Given a string, convert it to sentence case.
 * @param item - The string to sentence case
 * @returns
 * @public
 */
function sentence(str) {
    return str[0].toUpperCase() + str.substr(1);
}
/**
 * Creates an oxford-comma separated list of items.
 * @param args - items to list out
 * @param conjunction - in: x, y, and z "and" is the conjunction to use
 * @returns
 * @public
 */
function list(items, conjunction = 'or') {
    return items.reduce((oxford, item, index) => {
        oxford += item;
        if (index <= items.length - 2 && items.length > 2) {
            oxford += ', ';
        }
        if (index === items.length - 2) {
            oxford += `${items.length === 2 ? ' ' : ''}${conjunction} `;
        }
        return oxford;
    }, '');
}
/**
 * Given a string or a date return a nice human-readable version.
 * @param date - A string or a date.
 * @public
 */
function date(date) {
    const dateTime = typeof date === 'string' ? new Date(Date.parse(date)) : date;
    if (!(dateTime instanceof Date)) {
        return '(unknown)';
    }
    return new Intl.DateTimeFormat(undefined, {
        dateStyle: 'medium',
    }).format(dateTime);
}
/**
 * Orders two variables smallest to largest.
 * @param first - first argument
 * @param second - Second argument
 * @returns
 * @public
 */
function order(first, second) {
    return Number(first) >= Number(second) ? [second, first] : [first, second];
}

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$B = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'إضافة',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'إزالة',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'إزالة الكل',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'عذرا، لم يتم تعبئة جميع الحقول بشكل صحيح.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'إرسال',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'لا يوجد ملف مختار',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'تحرك لأعلى',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'انتقل لأسفل',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'يتم الآن التحميل...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'تحميل المزيد',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$B = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `الرجاء قبول ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `يجب أن يكون ${sentence(name)} بعد ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `يجب أن يكون ${sentence(name)} في المستقبل.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `يمكن أن يحتوي ${sentence(name)} على أحرف أبجدية فقط.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `يمكن أن يحتوي ${sentence(name)} على أحرف وأرقام فقط.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `يمكن أن تحتوي ${sentence(name)} على أحرف ومسافات فقط.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `يجب أن يكون ${sentence(name)} قبل ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `يجب أن يكون ${sentence(name)} في الماضي.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `تمت تهيئة هذا الحقل بشكل غير صحيح ولا يمكن إرساله.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `يجب أن يكون ${sentence(name)} ما بين ${a} و ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} غير متطابق.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} ليس تاريخًا صالحًا ، يرجى استخدام التنسيق ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'تمت تهيئة هذا الحقل بشكل غير صحيح ولا يمكن إرساله';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `يجب أن يكون ${sentence(name)} بين ${date(args[0])} و ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'الرجاء أدخال بريد إليكتروني صالح.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `لا ينتهي ${sentence(name)} بـ ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} ليست قيمة مسموح بها.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `يجب أن يكون ${sentence(name)} حرفًا واحدًا على الأقل.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `يجب أن يكون ${sentence(name)} أقل من أو يساوي ${max} حرفًا.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `يجب أن يتكون ${sentence(name)} من الأحرف ${max}.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `يجب أن يكون ${sentence(name)} أكبر من أو يساوي ${min} حرفًا.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `يجب أن يكون ${sentence(name)} بين ${min} و ${max} حرفًا.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} ليست قيمة مسموح بها.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `لا يمكن أن يكون أكثر من ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `يجب أن يكون ${sentence(name)} أقل من أو يساوي ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'لا يسمح بتنسيقات الملفات.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `يجب أن يكون ${sentence(name)} من النوع: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `لا يمكن أن يكون أقل من ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `يجب أن يكون ${sentence(name)} على الأقل ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” ليس ${name} مسموحًا به.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} يجب ان يكون رقماً`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} مطلوب.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `لا يبدأ ${sentence(name)} بـ ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `الرجاء تضمين عنوان رابط صحيح.`;
        /* </i18n> */
    },
};

var ar = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$B,
    validation: validation$B
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$A = {
    /**
     * Shown on a button for adding additional items.
     */
    add: 'əlavə edin',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'çıxarmaq',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Hamısını silin',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Üzr istəyirik, bütün sahələr düzgün doldurulmayıb.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Təqdim et',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Heç bir fayl seçilməyib',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'yuxarı hərəkət',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Aşağı hərəkət',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Yükləmə...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Daha çox yüklə',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$A = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `${name} qəbul edin.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} ${date(args[0])} sonra olmalıdır.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} gələcəkdə olmalıdır.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} yalnız əlifba sırası simvollarından ibarət ola bilər.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} yalnız hərf və rəqəmlərdən ibarət ola bilər.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} yalnız hərflərdən və boşluqlardan ibarət ola bilər.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} ${date(args[0])} əvvəl olmalıdır.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} keçmişdə olmalıdır.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Bu sahə səhv konfiqurasiya edilib və onu təqdim etmək mümkün deyil.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} ${a} və ${b} arasında olmalıdır.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} uyğun gəlmir.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} etibarlı tarix deyil, ${args[0]} formatından istifadə edin`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Bu sahə səhv konfiqurasiya edilib və onu təqdim etmək mümkün deyil';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} ${date(args[0])} və ${date(args[1])} arasında olmalıdır`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Etibarlı e-poçt ünvanı daxil edin.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} ${list(args)} ilə bitmir.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} icazə verilən dəyər deyil.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} ən azı bir simvol olmalıdır.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} ${max} simvoldan kiçik və ya ona bərabər olmalıdır.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} ${max} simvol uzunluğunda olmalıdır.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} ${min} simvoldan böyük və ya ona bərabər olmalıdır.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} ${min} və ${max} simvol arasında olmalıdır.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} icazə verilən dəyər deyil.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `${args[0]} ${name}-dən çox ola bilməz.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} ${args[0]} dəyərindən kiçik və ya ona bərabər olmalıdır.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Fayl formatlarına icazə verilmir.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} aşağıdakı tipdə olmalıdır: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `${args[0]} ${name}-dən az ola bilməz.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} ən azı ${args[0]} olmalıdır.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” icazə verilən ${name} deyil.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} rəqəm olmalıdır.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} tələb olunur.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} ${list(args)} ilə başlamır.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Zəhmət olmasa etibarlı url daxil edin`;
        /* </i18n> */
    },
};

var az = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$A,
    validation: validation$A
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$z = {
    /**
     * Shown on a button for adding additional items.
     */
    add: 'Добави',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Премахни',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Премахни всички',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Извинете, не всички полета са попълнени правилно.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Изпрати',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Няма избран файл',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Преместване нагоре',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Преместете се надолу',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Зареждане...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Заредете повече',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$z = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Моля приемете ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} трябва да е след ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} трябва да бъде в бъдещето.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} може да съдържа само букви.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} може да съдържа само букви и цифри.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} може да съдържа само букви и интервали.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} трябва да е преди ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} трябва да бъде в миналото.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Това поле е конфигурирано неправилно и не може да бъде изпратено`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} трябва да бъде между ${a} и ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} не съвпада.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} е невалидна дата. Моля, използвайте формата ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Това поле е конфигурирано неправилно и не може да бъде изпратено';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} трябва да бъде между ${date(args[0])} и ${date(args[1])}.`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Моля, въведете валиден имейл адрес.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} не завършва на ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} е неразрешена стойност.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} трябва да има поне един символ.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} трябва да бъде по-малко или равно на ${max} символа.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} трябва да бъде ${max} символи дълго.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} трябва да бъде по-голямо или равно на ${min} символа.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} трябва да бъде между ${min} и ${max} символа.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} е неразрешена стойност.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Не може да има повече от ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} трябва да бъде по-малко или равно на ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Не са разрешени никакви файлови формати.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} трябва да бъде от тип: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Не може да има по-малко от ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} трябва да бъде поне ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” е неразрешен ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} трябва да бъде число.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} е задължително.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} не започва с ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Моля, въведете валиден URL адрес.`;
        /* </i18n> */
    },
};

var bg = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$z,
    validation: validation$z
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$y = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'Přidat',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Odebrat',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Odebrat vše',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Pardon, ale ne všechna pole jsou vyplněna správně.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Odeslat',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Žádný soubor nebyl vybrán',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Pohyb nahoru',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Posunout dolů',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Načítání...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Načíst více',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$y = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Prosím, zaškrtněte ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} musí být po ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} musí být v budoucnosti.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} může obsahovat pouze písmena.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} může obsahovat pouze písmena a čísla.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} musí být před ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} musí být v minulosti.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Toto pole bylo špatně nakonfigurováno a nemůže být odesláno.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} musí být mezi ${a} a ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} nejsou shodná.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} není platné datum, prosím, použijte formát ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Toto pole bylo špatně nakonfigurováno a nemůže být odesláno.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} musí být mezi ${date(args[0])} a ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Prosím, zadejte platnou e-mailovou adresu.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} nekončí na ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} není povolená hodnota.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} musí mít nejméně jeden znak.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} může mít maximálně ${max} znaků.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} by mělo být ${max} znaků dlouhé.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} musí obsahovat minimálně ${min} znaků.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} musí být dlouhé ${min} až ${max} znaků.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} není povolená hodnota.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Nelze použít více než ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} musí mít menší nebo rovno než ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Nejsou nakonfigurovány povolené typy souborů.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} musí být typu: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Nelze mít méně než ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} musí být minimálně ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” není dovolená hodnota pro ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} musí být číslo.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} je povinné.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} nezačíná na ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Zadejte, prosím, platnou URL adresu.`;
        /* </i18n> */
    },
};

var cs = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$y,
    validation: validation$y
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$x = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'Tilføj',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Fjern',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Fjern alle',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Alle felter er ikke korrekt udfyldt.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Send',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Ingen filer valgt',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Flyt op',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Flyt ned',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Indlæser...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Indlæs mere',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$x = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Accepter venligst ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} skal være senere end ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} skal være i fremtiden.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} kan kun indeholde bogstaver.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} kan kun indeholde bogstaver og tal.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} kan kun indeholde bogstaver og mellemrum.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} skal være før ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} skal være før i dag.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Dette felt er ikke konfigureret korrekt og kan derfor ikke blive sendt.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} skal være mellem ${a} og ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} matcher ikke.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} er ikke gyldig, brug venligst formatet ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Dette felt er ikke konfigureret korrekt og kan derfor ikke blive sendt.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} skal være mellem ${date(args[0])} og ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Indtast venligst en gyldig email-adresse.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} slutter ikke med ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} er ikke en gyldig værdi.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} skal være på mindst ét tegn.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} skal være på højst ${max} tegn.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} skal være ${max} tegn lange.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} skal være på mindst ${min} tegn.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} skal være på mindst ${min} og højst ${max} tegn.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} er ikke en gyldig værdi.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Kan ikke have flere end ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} skal være mindre eller lig med ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Ingen filformater tilladt.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} skal være af filtypen: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Kan ikke have mindre end ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} skal være mindst ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” er ikke en tilladt ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} skal være et tal.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} er påkrævet.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} starter ikke med ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Indtast venligst en gyldig URL.`;
        /* </i18n> */
    },
};

var da = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$x,
    validation: validation$x
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$w = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'Hinzufügen',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Entfernen',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Alles entfernen',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Entschuldigung, nicht alle Felder wurden korrekt ausgefüllt.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Senden',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Keine Datei ausgewählt',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Gehe nach oben',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Gehen Sie nach unten',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Wird geladen...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Mehr laden',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$w = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Bitte ${name} akzeptieren.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} muss nach dem ${date(args[0])} liegen.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} muss in der Zukunft liegen.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} darf nur Buchstaben enthalten.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} darf nur Buchstaben und Zahlen enthalten.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} dürfen nur Buchstaben und Leerzeichen enthalten.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} muss vor dem ${date(args[0])} liegen.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} muss in der Vergangenheit liegen.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Dieses Feld wurde falsch konfiguriert und kann nicht übermittelt werden.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} muss zwischen ${args[0]} und ${args[1]} sein.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} stimmt nicht überein.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} ist kein gültiges Datum im Format ${args[0]}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Dieses Feld wurde falsch konfiguriert und kann nicht übermittelt werden.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} muss zwischen ${date(args[0])} und ${date(args[1])} liegen.`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'E-Mail Adresse ist ungültig.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} endet nicht mit ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} enthält einen ungültigen Wert.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = first <= second ? first : second;
        const max = second >= first ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} muss mindestens ein Zeichen enthalten.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} darf maximal ${max} Zeichen enthalten.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} sollte ${max} Zeichen lang sein.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} muss mindestens ${min} Zeichen enthalten.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} muss zwischen ${min} und ${max} Zeichen enthalten.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} enthält einen ungültigen Wert.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Darf maximal ${args[0]} ${name} haben.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} darf maximal ${args[0]} sein.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Keine Dateiformate konfiguriert.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} muss vom Typ ${args[0]} sein.`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Mindestens ${args[0]} ${name} erforderlich.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} muss mindestens ${args[0]} sein.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” ist kein gültiger Wert für ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} muss eine Zahl sein.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} ist erforderlich.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} beginnt nicht mit ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `URL ist ungültig.`;
        /* </i18n> */
    },
};

var de = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$w,
    validation: validation$w
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$v = {
    /**
     * Shown on a button for adding additional items.
     */
    add: 'Προσθήκη',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Αφαίρεση',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Αφαίρεση όλων',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Λυπούμαστε, υπάρχουν πεδία που δεν έχουν συμπληρωθεί σωστά.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Υποβολή',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Κανένα αρχείο δεν έχει επιλεγεί',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Προς τα επάνω',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Προς τα κάτω',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Φορτώνει...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Φόρτωση περισσότερων',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$v = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Παρακαλώ αποδεχτείτε το ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} πρέπει να είναι μετά της ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} πρέπει να είναι στο μέλλον.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} μπορεί να περιέχει μόνο αλφαβητικούς χαρακτήρες.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} μπορεί να περιέχει μόνο γράμματα και αριθμούς.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} μπορεί να περιέχει μόνο γράμματα και κενά.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} πρέπει να είναι πριν της ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} πρέπει να είναι στο παρελθόν.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Αυτό το πεδίο έχει ρυθμιστεί λανθασμένα και δεν μπορεί να υποβληθεί.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} πρέπει να είναι μεταξύ ${a} και ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} δεν ταιριάζει.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} δεν είναι έγυρη ημερομηνία, παρακαλώ ακολουθήστε την διαμόρφωση ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Αυτό το πεδίο έχει ρυθμιστεί λανθασμένα και δεν μπορεί να υποβληθεί';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} πρέπει να είναι μεταξύ ${date(args[0])} και ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Παρακαλώ πληκτρολογήστε μια έγκυρη email διεύθυνση. ',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} δεν καταλήγει με ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} δεν είναι μια επιτρεπτή τιμή.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} πρέπει να είναι τουλάχιστον ενός χαρακτήρα.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} πρέπει να είναι λιγότεροι ή ίσοι με ${max} χαρακτήρες.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `Το ${sentence(name)} θα πρέπει να έχει μήκος ${max} χαρακτήρες.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} πρέπει να είναι περισσότεροι ή ίσοι με ${min} χαρακτήρες.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} πρέπει να είναι μεταξύ ${min} και ${max} χαρακτήρες.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} δεν είναι μια επιτρεπτή τιμή.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Δεν μπορεί να έχει παραπάνω από ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} πρέπει αν είναι λιγότερο ή ίσο με το ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Δεν επιτρέπονται αρχεία.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} πρέπει να είναι τύπου: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Δεν μπορεί να είναι λιγότερο από ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} πρέπει να είναι τουλάχιστον ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” δεν είναι μια επιτρεπτή ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} πρέπει να είναι αριθμός.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} είναι υποχρεωτικό.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} δεν αρχίζει με ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Παρακαλώ συμπεριλάβετε μια έγκυρη διεύθυνση ιστοσελίδας.`;
        /* </i18n> */
    },
};

var el = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$v,
    validation: validation$v
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$u = {
    /**
     * Shown on a button for adding additional items.
     */
    add: 'Add',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Remove',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Remove all',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Sorry, not all fields are filled out correctly.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Submit',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'No file chosen',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Move up',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Move down',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Loading...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Load more',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$u = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Please accept the ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} must be after ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} must be in the future.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} can only contain alphabetical characters.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} can only contain letters and numbers.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} can only contain letters and spaces.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} must be before ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} must be in the past.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `This field was configured incorrectly and can’t be submitted.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} must be between ${a} and ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} does not match.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} is not a valid date, please use the format ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'This field was configured incorrectly and can’t be submitted';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} must be between ${date(args[0])} and ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Please enter a valid email address.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} doesn’t end with ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} is not an allowed value.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} must be at least one character.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} must be less than or equal to ${max} characters.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} should be ${max} characters long.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} must be greater than or equal to ${min} characters.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} must be between ${min} and ${max} characters.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} is not an allowed value.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Cannot have more than ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} must be less than or equal to ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'No file formats allowed.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} must be of the type: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Cannot have less than ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} must be at least ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” is not an allowed ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} must be a number.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} is required.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} doesn’t start with ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Please include a valid url.`;
        /* </i18n> */
    },
};

var en = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$u,
    validation: validation$u
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$t = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'Añadir',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Quitar',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Quitar todos',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Discúlpe, los campos no fueron completados correctamente.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Enviar',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Archivo no seleccionado',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Moverse hacia arriba',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Moverse hacia abajo',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Cargando...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Cargar más',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$t = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Acepte el ${name} por favor.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} debe ser posterior a ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} debe ser una fecha futura.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} debe contener solo caractéres alfabéticos.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} debe ser alfanumérico.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} espacios alfa solo pueden contener letras y espacios.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} debe ser anterior a ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} debe ser una fecha pasada.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `El campo no fue completado correctamente y no puede ser enviado.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} debe estar entre ${a} y ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} no coincide.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} no es una fecha válida, por favor utilice el formato ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'El campo no fue completado correctamente y no puede ser enviado.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} debe estar entre ${date(args[0])} y ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Ingrese una dirección de correo electrónico válida por favor.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} no termina con ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} no es un valor permitido.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} debe tener al menos una letra.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} debe tener como máximo ${max} caractéres.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} debe tener ${max} caracteres.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} debe tener como mínimo ${min} caractéres.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} debe tener entre ${min} y ${max} caractéres.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} no es un valor permitido.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `No puede tener más de ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} debe ser menor o igual a ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'No existen formatos de archivos permitidos.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} debe ser del tipo: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `No puede tener menos de ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} debe ser de al menos ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” no es un valor permitido de ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} debe ser un número.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} es requerido.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} debe comenzar con ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Proporcione una URL válida por favor.`;
        /* </i18n> */
    },
};

var es = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$t,
    validation: validation$t
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$s = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'افزودن',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'حذف',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'همه را حذف کنید',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'همه فیلدها به‌درستی پر نشده‌اند',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'ثبت',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'هیچ فایلی انتخاب نشده است',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'حرکت به بالا',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'حرکت به پایین',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'در حال بارگذاری...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'بارگذاری بیشتر',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$s = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `لطفاً ${name} را بپذیرید.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} باید بعد از تاریخ ${date(args[0])} باشد.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} باید مربوط به آینده باشد.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} فقط میتواند شامل حروف الفبا باشد.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} فقط میتواند شامل حروف و اعداد باشد.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} فقط می تواند شامل حروف و فاصله باشد.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} باید قبل از تاریخ ${date(args[0])} باشد.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} باید مربوط به گذشته باشد.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `این فیلد به اشتباه پیکربندی شده است و قابل ارسال نیست`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} باید بین ${args[0]} و ${args[1]} باشد.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} مطابقت ندارد.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} تاریخ معتبری نیست، لطفاً از قالب ${args[0]} استفاده کنید
`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'این فیلد به اشتباه پیکربندی شده است و قابل ارسال نیست';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} باید بین ${date(args[0])} و ${date(args[1])} باشد.`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'لطفا آدرس ایمیل معتبر وارد کنید.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} باید به ${list(args)} ختم شود.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} مجاز نیست.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = first <= second ? first : second;
        const max = second >= first ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} باید حداقل یک کاراکتر باشد.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} باید کمتر یا برابر با ${max} کاراکتر باشد.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} باید ${max} کاراکتر طولانی باشد.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} باید بزرگتر یا برابر با ${min} کاراکتر باشد.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} باید بین ${min} و ${max} کاراکتر باشد.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} مجاز نیست.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `${name} نمی تواند بیش از ${args[0]} باشد.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} باید کمتر یا برابر با ${args[0]} باشد.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'فرمت فایل مجاز نیست.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} باید از این نوع باشد: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `${name} نمی تواند کمتر از ${args[0]} باشد.
`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} باید حداقل ${args[0]} باشد.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `"${value}" یک ${name} مجاز نیست.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} باید عدد باشد.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `پر کردن ${sentence(name)} اجباری است.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} باید با ${list(args)} شروع شود.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `لطفاً آدرس اینترنتی معتبر وارد کنید.`;
        /* </i18n> */
    },
};

var fa = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$s,
    validation: validation$s
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$r = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'Lisää',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Poista',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Poista kaikki',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Kaikkia kenttiä ei ole täytetty oikein.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Tallenna',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Ei valittuja tiedostoja',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Siirrä ylös',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Siirrä alas',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Ladataan...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Lataa lisää',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$r = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Ole hyvä ja hyväksy ${name}`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} tulee olla ${date(args[0])} jälkeen.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} on oltava tulevaisuudessa.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} saa sisältää vain kirjaimia.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} saa sisältää vain kirjaimia ja numeroita.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} voivat sisältää vain kirjaimia ja välilyöntejä.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} tulee olla ennen: ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} on oltava menneisyydessä.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Tämä kenttä on täytetty virheellisesti joten sitä ei voitu lähettää.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} on oltava välillä ${a} - ${b} `;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} ei täsmää.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} ei ole validi päivämäärä, ole hyvä ja syötä muodossa: ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Tämä kenttä on täytetty virheellisesti joten sitä ei voitu lähettää.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} on oltava välillä ${date(args[0])} - ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Syötä validi sähköpostiosoite.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} tulee päättyä ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} ei ole sallittu vaihtoehto.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} on oltava vähintään yksi merkki.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} on oltava ${max} tai alle merkkiä.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} pitäisi olla ${max} merkkiä pitkä.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} on oltava vähintään ${min} merkkiä.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} on oltava vähintään ${min}, enintään ${max} merkkiä.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} ei ole sallittu arvo.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Valitse enintään ${args[0]} ${name} vaihtoehtoa.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} on oltava ${args[0]} tai alle.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Tiedostoja ei sallita.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} tulee olla ${args[0]}-tiedostotyyppiä.`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Valitse vähintään ${args[0]} ${name} vaihtoehtoa.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} tulee olla ${args[0]} tai suurempi.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” ei ole sallittu ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `Kentän ${sentence(name)} tulee olla numero.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} vaaditaan.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} on alettava ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Syötä validi url-osoite.`;
        /* </i18n> */
    },
};

var fi = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$r,
    validation: validation$r
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$q = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'Ajouter',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Supprimer',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Enlever tout',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Désolé, tous les champs ne sont pas remplis correctement.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Valider',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Aucun fichier choisi',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Déplacez-vous',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Déplacez-vous',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Chargement...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Chargez plus',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$q = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Veuillez accepter le ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} doit être postérieure au ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} doit être dans le futur.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} ne peut contenir que des caractères alphabétiques.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} ne peut contenir que des lettres et des chiffres.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} ne peuvent contenir que des lettres et des espaces.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} doit être antérieure au ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} doit être dans le passé.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Ce champ a été configuré de manière incorrecte et ne peut pas être soumis.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} doit être comprise entre ${a} et ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} ne correspond pas.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} n'est pas une date valide, veuillez utiliser le format ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Ce champ a été configuré de manière incorrecte et ne peut pas être soumis.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} doit être comprise entre ${date(args[0])} et ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Veuillez saisir une adresse email valide.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} ne se termine pas par ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} n'est pas une valeur autorisée.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} doit comporter au moins un caractère.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} doit être inférieur ou égal à ${max} caractères.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} doit contenir ${max} caractères.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} doit être supérieur ou égal à ${min} caractères.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} doit être comprise entre ${min} et ${max} caractères.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} n'est pas une valeur autorisée.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Ne peut pas avoir plus de ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} doit être inférieur ou égal à ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Aucun format de fichier n’est autorisé';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} doit être du type: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Ne peut pas avoir moins de ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} doit être au moins de ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” n'est pas un ${name} autorisé.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} doit être un nombre.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} est requis.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} ne commence pas par ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Veuillez saisir une url valide.`;
        /* </i18n> */
    },
};

var fr = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$q,
    validation: validation$q
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$p = {
    /**
     * Shown on a button for adding additional items.
     */
    add: 'Foeg ta',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Ferwider',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Ferwider alles',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Sorry, net alle fjilden binne korrekt ynfolle.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Ferstjoere',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Gjin bestân keazen',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$p = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Akseptearje de ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} moat nei ${date(args[0])} wêze.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} moat yn de takomst lizze.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} mei allinne alfabetyske tekens befetsje.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} mei allinne letters en sifers befetsje.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} mei allinne letters en spaasjes befetsje.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} moat foar ${date(args[0])} falle.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} moat yn it ferline wêze.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Dit fjild is ferkeard konfigurearre en kin net ferstjoerd wurde.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} moat tusken ${a} en ${b} lizze.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} komt net oerien.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} is gjin jildige datum, brûk de notaasje ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Dit fjild is ferkeard konfigurearre en kin net ferstjoerd wurde';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} moat tusken ${date(args[0])} en ${date(args[1])} lizze`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Folje in jildich e-mailadres yn.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} einiget net mei ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} is gjin tastiene wearde.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} moat minimaal ien teken wêze.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} moat lytser wêze as of gelyk wêze oan ${max} tekens.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} moat ${max} tekens lang wêze.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} moat grutter wêze as of gelyk wêze oan ${min} tekens.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} moat tusken de ${min} en ${max} tekens befetsje.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} is gjin tastiene wearde.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Mei net mear as ${args[0]} ${name} hawwe.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} moat lytser wêze as of gelyk wêze oan ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Gjin bestânsnotaasjes tastien.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} moat fan it type: ${args[0]} wêze`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Mei net minder as ${args[0]} ${name} hawwe.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} moat minimaal ${args[0]} wêze.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `"${value}" is gjin tastiene ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} moat in getal wêze.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} is ferplicht.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} begjint net mei ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Doch der in jildige url by.`;
        /* </i18n> */
    },
};

var fy = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$p,
    validation: validation$p
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$o = {
    /**
     * Shown on a button for adding additional items.
     */
    add: 'הוסף',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'מחק',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'מחק הכל',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'שים לב, לא כל השדות מלאים כראוי.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'שלח',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'לא נבחר קובץ..',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'הזז למעלה',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'הזז למטה',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'טוען...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'טען יותר',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$o = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `אנא אשר את ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} חייב להיות אחרי ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} חייב להיות בעתיד.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} חייב להכיל אותיות אלפבת.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} יכול להכיל רק מספרים ואותיות.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} יכול להכיל רק אותיות ורווחים.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} חייב להיות לפני ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} חייב להיות בעבר`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `שדה זה לא הוגדר כראוי ולא יכול להישלח.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} חייב להיות בין ${a} ו- ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} לא מתאים.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} הוא לא תאריך תקין, אנא השתמש בפורמט ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'שדה זה לא הוגדר כראוי ולא יכול להישלח.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} חייב להיות בין ${date(args[0])} ו- ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'אנא הקלד אימייל תקין.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} לא מסתיים ב- ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} הוא לא ערך מורשה.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} חייב להיות לפחות תו אחד.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} חייב להיות פחות או שווה ל- ${max} תווים.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} צריך להיות ${max} תווים ארוכים.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} חייב להיות גדול או שווה ל- ${min} תווים.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} חייב להיות בין ${min} ו- ${max} תווים.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} הוא לא ערך תקין.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `${name} לא יכול להיות עם יותר מ- ${args[0]}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} חייב להיות פחות או שווה ל- ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'פורמט הקובץ לא מורשה.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} חייב להיות מסוג: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `${name} לא יכול להיות עם פחות מ- ${args[0]}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} חייב להיות לפחות ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” לא מתאים ל- ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} חייב להיות מספר.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} הינו חובה.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} לא מתחיל ב- ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `אנא הקלד קישור תקין.`;
        /* </i18n> */
    },
};

var he = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$o,
    validation: validation$o
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$n = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'Dodaj',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Ukloni',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Pojedina polja nisu ispravno ispunjena.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Predaj',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Pomaknite se gore',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Pomakni se dolje',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Učitavanje...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Učitaj više',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$n = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Potrebno je potvrditi ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} mora biti u periodu poslije ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} mora biti u budućnosti.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} mora sadržavati samo slova.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} mora sadržavati slova i brojeve.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} mogu sadržavati samo slova i razmake..`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} mora biti prije ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} mora biti u prošlosti.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Format sadržaja nije ispravan i ne može biti predan.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} mora biti između ${args[0]} i ${args[1]}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} ne odgovara zadanoj vrijednosti.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} nije ispravan format datuma. Molimo koristite sljedeći format: ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Ovo polje nije ispravno postavljeno i ne može biti predano.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} mora biti vrijednost između ${date(args[0])} i ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Molimo upišite ispravnu email adresu.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} ne završava s ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} nije dopuštena vrijednost.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = first <= second ? first : second;
        const max = second >= first ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} mora sadržavati barem jedan znak.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} mora imati ${max} ili manje znakova.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} trebao bi biti dugačak ${max} znakova.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} mora imati barem ${min} znakova.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `Broj znakova za polje ${sentence(name)} mora biti između ${min} i ${max}.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} nije dozvoljena vrijednost.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Ne smije imati više od ${args[0]} ${name} polja.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} mora imati vrijednost manju ili jednaku ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Format datoteke nije dozvoljen.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `Format datoteke na polju ${sentence(name)} mora odgovarati: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Broj upisanih vrijednosti na polju ${name} mora biti barem ${args[0]}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} mora biti barem ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” nije dozvoljena vrijednost na polju ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} mora biti broj.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} je obavezno.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} ne počinje s ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Molimo unesite ispravnu poveznicu.`;
        /* </i18n> */
    },
};

var hr = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$n,
    validation: validation$n
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$m = {
    /**
     * Shown on a button for adding additional items.
     */
    add: 'Hozzáadás',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Eltávolítás',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Összes eltávolítása',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Sajnáljuk, nem minden mező lett helyesen kitöltve.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Beküldés',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Nincs fájl kiválasztva',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Mozgás felfelé',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Mozgás lefelé',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Betöltés...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Töltsön be többet',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$m = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Fogadja el a ${name} mezőt.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} mezőnek ${date(args[0])} után kell lennie.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} mezőnek a jövőben kell lennie.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} csak alfanumerikus karaktereket tartalmazhat.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} csak betűket és számokat tartalmazhat.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} csak betűket és szóközöket tartalmazhat.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} mezőnek ${date(args[0])} előtt kell lennie.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} mezőnek a múltban kell lennie.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Ez a mező hibásan lett konfigurálva, így nem lehet beküldeni.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `A ${sentence(name)} mezőnek ${a} és ${b} között kell lennie.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} nem egyezik.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} nem érvényes dátum, ${args[0]} formátumot használj`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Ez a mező hibásan lett konfigurálva, így nem lehet beküldeni.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} mezőnek ${date(args[0])} és ${args[1]} között kell lennie`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Kérjük, érvényes email címet adjon meg.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} mező nem a kijelölt (${list(args)}) módon ér véget.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} nem engedélyezett érték.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} mezőnek legalább egy karakteresnek kell lennie.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} mezőnek maximum ${max} karakteresnek kell lennie.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} ${max} karakter hosszúnak kell lennie.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} mezőnek minimum ${min} karakteresnek kell lennie.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} mezőnek ${min} és ${max} karakter között kell lennie.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} nem engedélyezett érték.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Nem lehet több mint ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} nem lehet nagyobb, mint ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Nincsenek támogatott fájlformátumok.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)}-nak/nek a következőnek kell lennie: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Nem lehet kevesebb, mint ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)}-nak/nek minimum ${args[0]}-nak/nek kell lennie.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `"${value}" nem engedélyezett ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} mezőnek számnak kell lennie.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} mező kötelező.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} nem a következővel kezdődik: ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Kérjük, érvényes URL-t adjon meg.`;
        /* </i18n> */
    },
};

var hu = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$m,
    validation: validation$m
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$l = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'Tambah',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Hapus',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Hapus semua',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Maaf, tidak semua bidang formulir terisi dengan benar',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Kirim',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Tidak ada file yang dipilih',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Pindah ke atas',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Pindah ke bawah',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Memuat...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Muat lebih',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$l = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Tolong terima kolom ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} nilainya harus lebih dari waktu ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} harus berisi waktu di masa depan.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} hanya bisa diisi huruf alfabet.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} hanya bisa diisi huruf dan angka.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} hanya boleh berisi huruf dan spasi..`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} nilainya harus kurang dari waktu ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} harus berisi waktu yang sudah lampau.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Kolom ini tidak diisi dengan benar sehingga tidak bisa dikirim`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} harus bernilai diantara ${a} dan ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} nilainya tidak cocok.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} waktu tidak cocok, mohon gunakan format waktu ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Kolom ini tidak diisi dengan benar sehingga tidak bisa dikirim';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} harus diantara waktu ${date(args[0])} dan waktu ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Tolong tulis alamat email yang benar.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} nilainya tidak berakhiran dengan ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} adalah nilai yang tidak diizinkan.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} nilainya setidaknya berisi satu karakter.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} jumlah karakternya harus kurang dari atau sama dengan ${max} karakter.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} harus ${max} karakter panjang.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} jumlah karakternya harus lebih dari atau sama dengan ${min} karakter.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} jumlah karakternya hanya bisa antara ${min} dan ${max} karakter.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} nilainya tidak diizinkan.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Tidak bisa memiliki lebih dari ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} harus lebih kecil atau sama dengan ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Format file tidak diizinkan';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} hanya bisa bertipe: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Tidak boleh kurang dari ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} setidaknya harus berisi ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” adalah nilai yang tidak diperbolehkan untuk ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} harus berupa angka.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} harus diisi.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} tidak dimulai dengan ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Mohon tuliskan url yang benar.`;
        /* </i18n> */
    },
};

var id = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$l,
    validation: validation$l
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$k = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'Inserisci',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Rimuovi',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Rimuovi tutti',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Ci dispiace, non tutti i campi sono compilati correttamente.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Invia',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Nessun file selezionato',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Sposta in alto',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Sposta giù',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Caricamento...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Carica altro',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$k = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Si prega di accettare ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `la data ${sentence(name)} deve essere successiva ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `la data ${sentence(name)} deve essere nel futuro.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} può contenere solo caratteri alfanumerici.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} può contenere solo lettere e numeri.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} può contenere solo lettere e spazi.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `la data ${sentence(name)} deve essere antecedente ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} deve essere nel passato.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Questo campo è stato configurato male e non può essere inviato.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} deve essere tra ${a} e ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} non corrisponde.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} non è una data valida, per favore usa il formato ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Questo campo è stato configurato in modo errato e non può essere inviato.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} deve essere tra ${date(args[0])} e ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Per favore inserire un indirizzo email valido.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} non termina con ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} non è un valore consentito.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} deve contenere almeno un carattere.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} deve essere minore o uguale a ${max} caratteri.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} deve contenere ${max} caratteri.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} deve essere maggiore o uguale a ${min} caratteri.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} deve essere tra ${min} e ${max} caratteri.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} non è un valore consentito.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Non può avere più di ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} deve essere minore o uguale a ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Formato file non consentito.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} deve essere di tipo: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Non può avere meno di ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} deve essere almeno ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `"${value}" non è un ${name} consentito.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} deve essere un numero.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} è richiesto.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} non inizia con ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Per favore utilizare un url valido.`;
        /* </i18n> */
    },
};

var it = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$k,
    validation: validation$k
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$j = {
    /**
     * Shown on buttons for adding new items.
     */
    add: '追加',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: '削除',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: '全て削除',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: '項目が正しく入力されていません。',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: '送信',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'ファイルが選択されていません',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: '上に移動',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: '下へ移動',
    /**
     * Shown when something is actively loading.
     */
    isLoading: '読み込み中...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'さらに読み込む',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$j = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `${name}の同意が必要です。`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)}は${date(args[0])}より後の日付である必要があります。`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)}は将来の日付でなければなりません。`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)}には英字のみを含めることができます。`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)}には、文字と数字のみを含めることができます。`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)}には、文字とスペースのみを含めることができます。`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)}は${date(args[0])}より前の日付である必要があります。`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)}は過去の日付である必要があります。`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `このフィールドは正しく構成されていないため、送信できません。`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)}は${a}と${b}の間にある必要があります。`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)}が一致しません。`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)}は有効な日付ではありません。${args[0]}の形式を使用してください。`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'このフィールドは正しく構成されておらず、送信できません。';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)}は${date(args[0])}と${date(args[1])}の間にある必要があります。`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: '有効なメールアドレスを入力してください。',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)}は${list(args)}で終わっていません。`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)}は許可された値ではありません。`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)}は少なくとも1文字である必要があります。`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)}は${max}文字以下である必要があります。`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} の長さは ${max} 文字でなければなりません。`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)}は${min}文字以上である必要があります。`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)}は${min}から${max}文字の間でなければなりません。`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)}は許可された値ではありません。`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `${name}は${args[0]}を超えることはできません。`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)}は${args[0]}以下である必要があります。`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'ファイル形式は許可されていません。';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)}は${args[0]}である必要があります。`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `${name}は${args[0]}未満にすることはできません。`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)}は少なくとも${args[0]}である必要があります。`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}”は許可された${name}ではありません。`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)}は数値でなければなりません。`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)}は必須です。`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)}は${list(args)}で始まっていません。`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `有効なURLを含めてください。`;
        /* </i18n> */
    },
};

var ja = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$j,
    validation: validation$j
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$i = {
    /**
     * Shown on a button for adding additional items.
     */
    add: 'қосу',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Жою',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Барлығын жою',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Кешіріңіз, барлық өрістер дұрыс толтырылмаған.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Жіберу',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Ешбір файл таңдалмады',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Жоғары жылжу',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Төмен жылжытыңыз',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Жүктеу...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Көбірек жүктеңіз',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$i = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `қабылдаңыз ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} кейін болуы керек ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} болашақта болуы керек.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} тек алфавиттік таңбаларды қамтуы мүмкін.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} тек әріптер мен сандардан тұруы мүмкін.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} тек әріптер мен бос орындар болуы мүмкін.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} бұрын болуы керек ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} өткенде болуы керек.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Бұл өріс қате конфигурацияланған және оны жіберу мүмкін емес.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} арасында болуы керек ${a} және ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} сәйкес келмейді.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} жарамды күн емес, пішімді пайдаланыңыз ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Бұл өріс қате конфигурацияланған және оны жіберу мүмкін емес';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} арасында болуы керек ${date(args[0])} және ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Өтінеміз қолданыстағы электронды пошта адресін енгізіңіз.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} -мен бітпейді ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} рұқсат етілген мән емес.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} кем дегенде бір таңба болуы керек.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} кем немесе тең болуы керек ${max} кейіпкерлер.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} ${max} таңбалары болуы керек.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} артық немесе тең болуы керек ${min} кейіпкерлер.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} арасында болуы керек ${min} және ${max} кейіпкерлер.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} рұқсат етілген мән емес.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `артық болуы мүмкін емес ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} кем немесе тең болуы керек ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Файл пішімдері рұқсат етілмейді.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} типте болуы керек: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `кем болуы мүмкін емес ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} кем дегенде болуы керек ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” рұқсат етілмейді ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} сан болуы керек.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} талап етіледі.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} -ден басталмайды ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Жарамды URL мекенжайын қосыңыз.`;
        /* </i18n> */
    },
};

var kk = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$i,
    validation: validation$i
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$h = {
    /**
     * Shown on buttons for adding new items.
     */
    add: '추가',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: '제거',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: '모두 제거',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: '모든 값을 채워주세요',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: '제출하기',
    /**
     * Shown when no files are selected.
     */
    noFiles: '선택된 파일이 없습니다',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: '위로 이동',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: '아래로 이동',
    /**
     * Shown when something is actively loading.
     */
    isLoading: '로드 중...',
    /**
     * Shown when there is more to load.
     */
    loadMore: '더 불러오기',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$h = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `${name} 올바른 값을 선택 해주세요`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} ${date(args[0])} 이후여야 합니다`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} 미래의 날짜여야합니다`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} 알파벳 문자만 포함할 수 있습니다`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} 문자와 숫자만 포함될 수 있습니다`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} 문자와 공백만 포함할 수 있습니다.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} ${date(args[0])} 이전여야 합니다`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} 과거의 날짜여야합니다`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `잘못된 구성으로 제출할 수 없습니다`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} ${a}와 ${b} 사이여야 합니다`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} 일치하지 않습니다`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} 유효한 날짜가 아닙니다. ${args[0]}과 같은 형식을 사용해주세요`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return '잘못된 구성으로 제출할 수 없습니다';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} ${date(args[0])}에서 ${date(args[1])} 사이여야 합니다`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: '올바른 이메일 주소를 입력해주세요',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} ${list(args)}로 끝나지 않습니다`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} 허용되는 값이 아닙니다`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} 하나 이상의 문자여야 합니다`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} ${max}자 이하여야 합니다`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} 는 ${max} 자 길이여야 합니다.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} ${min} 문자보다 크거나 같아야 합니다`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} ${min}에서 ${max}자 사이여야 합니다`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} 허용되는 값이 아닙니다`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `${args[0]} ${name} 초과할 수 없습니다`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} ${args[0]}보다 작거나 같아야 합니다`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return '파일 형식이 허용되지 않습니다';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} ${args[0]} 유형이어야 합니다`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `${args[0]} ${name}보다 작을 수 없습니다`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} ${args[0]} 이상이어야 합니다`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `${value}" 허용되지 않는 ${name}입니다`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} 숫자여야 합니다`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} 필수 값입니다`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} ${list(args)}로 시작하지 않습니다`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `올바른 URL을 입력해주세요`;
        /* </i18n> */
    },
};

var ko = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$h,
    validation: validation$h
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$g = {
    /**
     * Shown on a button for adding additional items.
     */
    add: 'Legg til',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Fjern',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Fjern alle',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Beklager, noen felter er ikke fylt ut korrekt.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Send inn',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Ingen fil valgt',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Flytt opp',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Flytt ned',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Laster...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Last mer',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$g = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Vennligst aksepter ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} må være senere enn ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} må være i fremtiden.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} kan bare inneholde alfabetiske tegn.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} kan bare inneholde bokstaver og tall.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} kan bare inneholde bokstaver og mellomrom.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} må være tidligere enn ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} må være i fortiden.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Dette feltet er feilkonfigurert og kan ikke innsendes.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} må være mellom ${a} og ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} stemmer ikke overens.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} er ikke en gyldig dato, vennligst bruk formatet ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Dette feltet er feilkonfigurert og kan ikke innsendes.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} må være mellom ${date(args[0])} og ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Vennligst oppgi en gyldig epostadresse.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} slutter ikke med ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} er ikke en tillatt verdi.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} må ha minst ett tegn.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} må ha mindre enn eller nøyaktig ${max} tegn.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} skal være ${max} tegn langt.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} må ha mer enn eller nøyaktig ${min} tegn.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} må ha mellom ${min} og ${max} tegn.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} er ikke en tillatt verdi.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Kan ikke ha mer enn ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} må være mindre enn eller nøyaktig ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Ingen tillatte filformater.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} må være av typen: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Kan ikke ha mindre enn ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} må være minst ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” er ikke en tillatt ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} må være et tall.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} er påkrevd.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} starter ikke med ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Vennligst inkluder en gyldig url.`;
        /* </i18n> */
    },
};

var nb = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$g,
    validation: validation$g
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$f = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'Toevoegen',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Verwijderen',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Alles verwijderen',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Sorry, niet alle velden zijn correct ingevuld.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Versturen',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Geen bestand gekozen',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Naar boven gaan',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Naar beneden verplaatsen',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Aan het laden...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Meer laden',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$f = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Accepteer de ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} moet na ${date(args[0])} zijn.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} moet in de toekomst liggen.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} mag alleen alfabetische tekens bevatten.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} mag alleen letters en cijfers bevatten.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} mag alleen letters en spaties bevatten.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} moet vóór ${date(args[0])} vallen.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} moet in het verleden liggen.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Dit veld is onjuist geconfigureerd en kan niet worden verzonden.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} moet tussen ${a} en ${b} liggen.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} komt niet overeen.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} is geen geldige datum, gebruik de notatie ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Dit veld is onjuist geconfigureerd en kan niet worden verzonden';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} moet tussen ${date(args[0])} en ${date(args[1])} liggen`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Vul een geldig e-mailadres in.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} eindigt niet met ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} is geen toegestane waarde.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} moet minimaal één teken zijn.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} moet kleiner zijn dan of gelijk zijn aan ${max} tekens.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} moet ${max} tekens lang zijn.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} moet groter zijn dan of gelijk zijn aan ${min} tekens.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} moet tussen de ${min} en ${max} tekens bevatten.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} is geen toegestane waarde.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Mag niet meer dan ${args[0]} ${name} hebben.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} moet kleiner zijn dan of gelijk zijn aan ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Geen bestandsformaten toegestaan.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} moet van het type: ${args[0]} zijn`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Mag niet minder dan ${args[0]} ${name} hebben.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} moet minimaal ${args[0]} zijn.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `"${value}" is geen toegestane ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} moet een getal zijn.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} is verplicht.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} begint niet met ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Vul een geldige url in.`;
        /* </i18n> */
    },
};

var nl = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$f,
    validation: validation$f
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$e = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'Dodaj',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Usuń',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Usuń wszystko',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Nie wszystkie pola zostały wypełnione poprawnie.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Wyślij',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Nie wybrano pliku',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Przesuń w górę',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Przesuń w dół',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Ładowanie...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Załaduj więcej',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$e = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Proszę zaakceptować ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} musi być po ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} musi być w przyszłości.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `Pole ${sentence(name)} może zawierać tylko znaki alfabetyczne.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `Pole ${sentence(name)} może zawierać tylko znaki alfanumeryczne.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `Pole ${sentence(name)} mogą zawierać tylko litery i spacje.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} musi być przed ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} musi być w przeszłości.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Pole zostało wypełnione niepoprawnie i nie może zostać wysłane.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `Wartość pola ${sentence(name)} musi być pomiędzy ${a} i ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} nie pokrywa się.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `Wartość pola ${sentence(name)} nie jest poprawną datą, proszę użyć formatu ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'To pole zostało wypełnione niepoprawnie i nie może zostać wysłane';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `Data w polu ${sentence(name)} musi być pomiędzy ${date(args[0])} i ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Proszę wpisać poprawny adres email.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `Pole ${sentence(name)} nie kończy się na ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `Pole ${sentence(name)} nie jest dozwoloną wartością.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `Pole ${sentence(name)} musi posiadać minimum jeden znak.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `Pole ${sentence(name)} musi zawierać ${max} lub mniej znaków.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `Pole ${sentence(name)} musi zawierać ${min} lub więcej znaków.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `Pole ${sentence(name)} musi mieć ${min} znaków.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `Pole ${sentence(name)} musi mieć ${min}-${max} znaków.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `Pole ${sentence(name)} zawiera niedozwolone znaki.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Nie można mieć więcej niż ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `Wartość pola ${sentence(name)} musi być mniejsza lub równa ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Nie podano dozwolonych typów plików.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} musi być typem: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Musisz podać więcej niż ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return ` Musisz podać conajmniej ${args[0]} ${sentence(name)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `Wartość pola ${name} jest niedozwolona.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} musi być numerem.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `Pole ${sentence(name)} jest wymagane.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `Wartośc pola ${sentence(name)} nie zaczyna się od ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Proszę podać prawidłowy adres url.`;
        /* </i18n> */
    },
};

var pl = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$e,
    validation: validation$e
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$d = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'Adicionar',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Remover',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Deletar tudo',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Desculpe, nem todos os campos foram preenchidos corretamente.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Enviar',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Nenhum arquivo',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Mova-se para cima',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Mova-se para baixo',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Carregando...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Carregue mais',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$d = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Por favor aceite o ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} deve ser posterior a ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} deve ser no futuro.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} só pode conter caracteres do alfabeto.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} só pode ter letras e números.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} só podem conter letras e espaços.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} deve ser anterior a ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} deve ser anterior a data atual.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `O campo foi configurado incorretamente e não pode ser enviado.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} deve estar entre ${args[0]} e ${args[1]}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} não confere.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} não é uma data válida, por favor use o formato ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'O campo foi configurado incorretamente e não pode ser enviado.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} deve ser entre ${date(args[0])} e ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Por favor informe um e-mail válido.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} não termina com ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} não é um valor permitido.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = first <= second ? first : second;
        const max = second >= first ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} deve ter ao menos um caractere.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} não pode ter mais que ${max} caracteres.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} deve ter ${max} caracteres.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} deve ter no mínimo ${min} caracteres.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} deve ter entre ${min} e ${max} caracteres.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} não é um valor permitido.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Não pode ter mais que ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} deve ser igual ou menor que ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Nenhum formato de arquivo permitido.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} deve ser do tipo: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Não pode ter menos que ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} deve ter pelo menos ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” não permite ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} deve ser um número.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} é obrigatório.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} não começa com ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Por favor informe um url válido.`;
        /* </i18n> */
    },
};

var pt = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$d,
    validation: validation$d
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$c = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'Adăugare',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Elimină',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Elimină tot',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Pare rău, unele câmpuri nu sunt corect completate.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Trimite',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Nu este selectat nici un fișier',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Mutare în sus',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Mutare în jos',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Se încarcă...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Încărcați mai mult',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$c = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Te rog acceptă ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} trebuie să fie după ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} trebuie sa fie în viitor.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} poate conține doar caractere alafetice.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} poate conține doar litere și numere.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} poate conține doar litere și spații.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} trebuie să preceadă ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} trebuie să fie în trecut.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Câmpul a fost configurat incorect și nu poate fi trimis.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} trebuie să fie între ${a} și ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} nu se potrivește.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} nu este validă, te rog foloște formatul ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Câmpul a fost incorect configurat și nu poate fi trimis.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} trebuie să fie între ${date(args[0])} și ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Te rog folosește o adresă de email validă.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} nu se termină cu ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} nu este o valoare acceptată.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} trebuie sa conțină cel puțin un caracter.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} trebuie sa aibă cel mult ${max} caractere.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} ar trebui să aibă ${max} caractere lungi.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} trebuie să aibă cel puțin ${min} caractere.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} trebuie să aibă între ${min} și ${max} caractere.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} nu este o valoare acceptată.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Nu poate avea mai mult decat ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} trebuie să fie cel mult egal cu ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Tipul de fișier neacceptat.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} trebuie să fie de tipul: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Nu poate avea mai puțin decât ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} trebuie să fie cel puțin ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” nu este o valoare acceptă pentru ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} trebuie să fie un număr.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} este necesar.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} nu începe cu ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Te rog include o adresă web validă`;
        /* </i18n> */
    },
};

var ro = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$c,
    validation: validation$c
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$b = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'Добавить',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Удалить',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Убрать все',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Извините, не все поля заполнены верно.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Отправить',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Файл не выбран',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Переместить вверх',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Переместить вниз',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Загрузка...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Загрузить больше',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$b = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Пожалуйста, примите ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `Дата ${sentence(name)} должна быть позже ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `Дата ${sentence(name)} должна быть в будущем.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `Поле ${sentence(name)} может содержать только буквы.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `Поле ${sentence(name)} может содержать только буквы и цифры.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} могут содержать только буквы и пробелы.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `Дата ${sentence(name)} должна быть раньше ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `Дата ${sentence(name)} должна быть в прошлом.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Это поле заполнено неверно и не может быть отправлено.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `Поле ${sentence(name)} должно быть между ${a} и ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `Поле ${sentence(name)} не совпадает.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `Поле ${sentence(name)} имеет неверную дату. Пожалуйста, используйте формат ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Это поле заполнено неверно и не может быть отправлено.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `Дата ${sentence(name)} должна быть между ${date(args[0])} и ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Пожалуйста, введите действительный электронный адрес.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `Поле ${sentence(name)} не должно заканчиваться на ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `Поле ${sentence(name)} имеет неподустимое значение.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `Поле ${sentence(name)} должно содержать минимум один символ.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `Длина поля ${sentence(name)} должна быть меньше или равна ${max} символам.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `Длина ${sentence(name)} должна составлять ${max} символов.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `Длина поля ${sentence(name)} должна быть больше или равна ${min} символам.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `Длина поля ${sentence(name)} должна быть между ${min} и ${max} символами.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `Поле ${sentence(name)} имеет недопустимое значение.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Не может быть выбрано больше, чем ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `Поле ${sentence(name)} должно быть меньше или равно ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Не указаны поддержиавемые форматы файла.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `Формат файла в поле ${sentence(name)} должен быть: ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Не может быть выбрано меньше, чем ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `Поле ${sentence(name)} должно быть не менее, чем ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” не поддерживается в поле ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `Поле ${sentence(name)} должно быть числом.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `Поле ${sentence(name)} обязательно для заполнения.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `Поле ${sentence(name)} должно начинаться с ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Пожалуйста, введите действительный URL адрес.`;
        /* </i18n> */
    },
};

var ru = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$b,
    validation: validation$b
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$a = {
    /**
     * Shown on a button for adding additional items.
     */
    add: 'Pridať',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Odstrániť',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Odstrániť všetko',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Prepáčte, ale nie všetky polia sú vyplnené správne.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Odoslať',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Nebol vybraný žiadny súbor',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Posunúť hore',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Posunúť dole',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Načítavanie...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Načítať viac',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$a = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Prosím zaškrtnite ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} musí byť za ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} musí byť v budúcnosti.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} môže obsahovať iba písmená.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} môže obsahovať iba písmená a čísla.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} môže obsahovať iba písmená a medzery.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} musí byť pred ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} musí byť v minulosti.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Toto pole bolo nesprávne nakonfigurované a nemôže byť odoslané.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} musí byť medzi ${a} and ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} does not match.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} nie je platným dátumom, prosím, použite formát ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Toto pole bolo nesprávne nakonfigurované a nemôže byť odoslané.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} musí byť medzi ${date(args[0])} a ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Prosím, zadajte platnú emailovú adresu.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} nekončí na ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} nie je povolená hodnota.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} musí mať najmenej jeden znak.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} musí byť menšie alebo rovné ako ${max} znakov.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} by mala mať dĺžku ${max} znakov.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} musí byť väčšie alebo rovné ako ${min} znakov.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} musí byť medzi ${min} až ${max} znakov.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} nie je povolená hodnota.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Nie je možné použiť viac než ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} musí byť menšie alebo rovné ako ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Nie sú povolené formáty súborov.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} musí byť typu: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Nemôže byť menej než ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} musí byť minimálne ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” nie je povolené hodnota pre ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} musí byť číslo.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} je povinné.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} nezačíná s ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Zadajte, prosím, platnú URL adresu.`;
        /* </i18n> */
    },
};

var sk = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$a,
    validation: validation$a
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$9 = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'Dodaj',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Odstrani',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Odstrani vse',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Nekatera polja niso pravilno izpolnjena.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Pošlji',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Nobena datoteka ni izbrana',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Premakni se navzgor',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Premakni se navzdol',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Nalaganje...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Naloži več',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$9 = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Prosimo popravite ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} mora biti po ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} mora biti v prihodnosti.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} lahko vsebuje samo znake abecede.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} lahko vsebuje samo črke in številke.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} lahko vsebuje samo črke in presledke.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} mora biti pred ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} mora biti v preteklosti.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `To polje je narobe nastavljeno in ne mora biti izpolnjeno.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} mora biti med ${a} in ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} se ne ujema.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} ni pravilen datum, prosimo uporabite format ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'To polje je narobe nastavljeno in ne mora biti izpolnjeno.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} mora biti med ${date(args[0])} in ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Vnesite veljaven e-poštni naslov.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} se mora kočati z ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} ni dovoljena vrednost.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} mora vsebovati vsaj en znak.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} mora vsebovati največ ${max} znakov.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} mora biti dolg ${max} znakov.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} mora vsebovati vsaj ${min} znakov.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} mora vsebovati med ${min} in ${max} znakov.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} ni dovoljena vrednost.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Največ je ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} je lahko največ ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Nobena vrsta datoteke ni dovoljena.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} mora biti tipa: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Najmanj ${args[0]} ${name} je dovoljenih.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} mora biti vsaj ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” ni dovoljen(a/o) ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} mora biti številka.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} je zahtevan(o/a).`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} se mora začeti z ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Vnesite veljavno povezavo.`;
        /* </i18n> */
    },
};

var sl = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$9,
    validation: validation$9
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$8 = {
    /**
     * Shown on a button for adding additional items.
     */
    add: 'Dodaj',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Ukloni',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Ukloni sve',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Pojedina polja nisu ispravno ispunjena.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Pošalji',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Fajl nije odabran',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Pomerite se gore',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Pomeri se dole',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Učitavanje...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Učitaj više',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$8 = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Molimo prihvatite ${name}`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} mora biti posle ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} mora biti u budućnosti.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} može da sadrži samo abecedne znakove.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} može da sadrži samo slova i brojeve.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} može da sadrži samo slova i razmake.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} mora biti pre ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} mora biti u prošlosti.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Ovo polje je pogrešno konfigurisano i ne može se poslati.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} mora biti između ${a} i ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} se ne podudara.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} nije važeći datum, molimo Vas koristite format ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Ovo polje je pogrešno konfigurisano i ne može se poslati';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} mora biti između ${date(args[0])} i ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Unesite ispravnu e-mail adresu.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} se ne završava sa ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} nije dozvoljena vrednost`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} mora biti najmanje jedan karakter.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} mora biti manji ili jednaki od ${max} karaktera.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} treba da bude ${max} znakova dugačak.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} mora biti veći ili jednaki od ${min} karaktera.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} mora biti između ${min} i ${max} karaktera.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} nije dozvoljena vrednost.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Ne može imati više od ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} mora biti manji ili jednaki od ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Nisu dozvoljeni formati datoteka.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} mora biti tipa: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Ne može imati manje od ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} mora da ima najmanje ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” nije dozvoljeno ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} mora biti broj.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} je obavezno polje.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} ne počinje sa ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Molimo unesite važeći URL.`;
        /* </i18n> */
    },
};

var sr = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$8,
    validation: validation$8
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$7 = {
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Ta bort',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Ta bort alla',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Tyvärr är inte alla fält korrekt ifyllda',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Skicka',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Ingen fil vald',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Flytta upp',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Flytta ner',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Laddar...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Ladda mer',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$7 = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Var god acceptera ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} måste vara efter ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} måste vara framåt i tiden.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} kan enbart innehålla bokstäver i alfabetet.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} kan bara innehålla bokstäver och siffror.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} kan bara innehålla bokstäver och blanksteg.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} måste vara före ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} måste vara bakåt i tiden.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Det här fältet ställdes inte in korrekt och kan inte användas.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} måste vara mellan ${a} och ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} matchar inte.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} är inte ett giltigt datum, var god använd formatet ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Det här fältet ställdes inte in korrekt och kan inte användas';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} måste vara mellan ${date(args[0])} och ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Var god fyll i en giltig e-postadress.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} slutar inte med ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} är inte ett godkänt värde.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} måste ha minst ett tecken.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} måste vara ${max} tecken eller färre.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} bör vara ${max} tecken långa.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} måste vara ${min} tecken eller fler.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} måste vara mellan ${min} och ${max} tecken.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} är inte ett godkänt värde.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Kan inte ha mer än ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} måste vara ${args[0]} eller mindre.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Inga filtyper tillåtna.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} måste vara av filtypen: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Kan inte ha mindre än ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} måste vara minst ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” är inte ett godkänt ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} måste vara en siffra.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} är obligatoriskt.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} börjar inte med ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Var god fyll i en giltig länk.`;
        /* </i18n> */
    },
};

var sv = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$7,
    validation: validation$7
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$6 = {
    /**
     * Shown on a button for adding additional items.
     */
    add: 'Илова кардан',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Хориҷ кардан',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Ҳамаро хориҷ кунед',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Бубахшед, на ҳама майдонҳо дуруст пур карда шудаанд.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Пешниҳод кунед',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Ягон файл интихоб нашудааст',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$6 = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Лутфан ${name}-ро қабул кунед`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} бояд пас аз ${date(args[0])} бошад.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} бояд дар оянда бошад.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} метавонад танҳо аломатҳои алифборо дар бар гирад.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} метавонад танҳо ҳарфҳо ва рақамҳоро дар бар гирад.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} метавонад танҳо ҳарфҳо ва фосилаҳоро дар бар гирад.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} бояд пеш аз ${date(args[0])} бошад.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} бояд дар гузашта бошад.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Ин майдон нодуруст танзим шудааст ва онро пешниҳод кардан ғайриимкон аст.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} бояд дар байни ${a} ва ${b} бошад.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} мувофиқат намекунад.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} санаи дуруст нест, лутфан формати ${args[0]}-ро истифода баред`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Ин майдон нодуруст танзим шудааст ва онро пешниҳод кардан ғайриимкон аст';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} бояд дар байни ${date(args[0])} ва ${date(args[1])} бошад`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Лутфан нишонаи имейли амалкунандаро ворид намоед.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} бо ${list(args)} ба охир намерасад.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} арзиши иҷозатдодашуда нест.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} бояд ҳадди аққал як аломат бошад.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} бояд аз ${max} аломат камтар ё баробар бошад.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} бояд ${max} аломат бошад.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} бояд аз ${min} аломат зиёд ё баробар бошад.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} бояд дар байни ${min} ва ${max} аломат бошад.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} арзиши иҷозатдодашуда нест.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Зиёда аз ${args[0]} ${name} дошта наметавонад.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} бояд аз ${args[0]} камтар ё баробар бошад.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Ягон формати файл иҷозат дода намешавад.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} бояд чунин намуд бошад: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Камтар аз ${args[0]} ${name} дошта наметавонад.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} бояд ҳадди аққал ${args[0]} бошад.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `"${value}" ${name} иҷозат дода намешавад.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} бояд рақам бошад.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} лозим аст.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} бо ${list(args)} оғоз намешавад.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Лутфан URL-и дурустро дохил кунед.`;
        /* </i18n> */
    },
};

var tg = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$6,
    validation: validation$6
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$5 = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'เพิ่ม',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'เอาออก',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'เอาออกทั้งหมด',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'ขออภัย ข้อมูลบางช่องที่กรอกไม่ถูกต้อง',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'ส่ง',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'ยังไม่ได้เลือกไฟล์',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'เลื่อนขึ้น',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'เลื่อนลง',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'กำลังโหลด...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'โหลดเพิ่มเติม',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$5 = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `กรุณายอมรับ ${name}`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} จะต้องเป็นวันที่หลังจาก ${date(args[0])}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} จะต้องเป็นวันที่ที่ยังไม่มาถึง`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} สามารถเป็นได้แค่ตัวอักษรเท่านั้น`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} สามารถเป็นได้แค่ตัวอักษรและตัวเลขเท่านั้น`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} สามารถเป็นได้แค่ตัวอักษรและเว้นวรรคเท่านั้น`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} จะต้องเป็นวันที่ที่มาก่อน ${date(args[0])}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} จะต้องเป็นวันที่ที่ผ่านมาแล้ว`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `ช่องนี้ถูกตั้งค่าอย่างไม่ถูกต้อง และจะไม่สามารถส่งข้อมูลได้`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} จะต้องเป็นค่าระหว่าง ${a} และ ${b}`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} ไม่ตรงกัน`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} ไม่อยู่ในรูปแบบวันที่ที่ถูกต้อง กรุณากรอกตามรูปแบบ ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'ช่องนี้ถูกตั้งค่าอย่างไม่ถูกต้อง และจะไม่สามารถส่งข้อมูลได้';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} จะต้องเป็นวันที่ระหว่าง ${date(args[0])} และ ${date(args[1])}`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'กรุณากรอกที่อยู่อีเมลทีถูกต้อง',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} จะต้องลงท้ายด้วย ${list(args)}`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} ไม่ใช่ค่าที่อนุญาตให้กรอก`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} จะต้องมีความยาวอย่างน้อยหนึ่งตัวอักษร`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} จะต้องมีความยาวไม่เกิน ${max} ตัวอักษร`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} ควรจะเป็น ${max} ตัวอักษรยาว`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} จะต้องมีความยาว ${min} ตัวอักษรขึ้นไป`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} จะต้องมีความยาวระหว่าง ${min} และ ${max} ตัวอักษร`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} ไม่ใช่ค่าที่อนุญาตให้กรอก`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `ไม่สามารถเลือกมากกว่า ${args[0]} ${name} ได้`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} จะต้องมีค่าไม่เกิน ${args[0]}`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'ไม่มีประเภทของไฟล์ที่อนุญาต';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} จะต้องเป็นไฟล์ประเภท ${args[0]} เท่านั้น`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `ไม่สามารถเลือกน้อยกว่า ${args[0]} ${name} ได้`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} จะต้องมีค่าอย่างน้อย ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” ไม่ใช่ค่า ${name} ที่อนุญาตให้กรอก`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} จะต้องเป็นตัวเลขเท่านั้น`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `กรุณากรอก ${sentence(name)}`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} จะต้องเริ่มต้นด้วย ${list(args)}`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `กรุณาระบุที่อยู่ลิงก์ให้ถูกต้อง`;
        /* </i18n> */
    },
};

var th = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$5,
    validation: validation$5
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$4 = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'Ekle',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Kaldır',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Hepsini kaldır',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Maalesef, tüm alanlar doğru doldurulmadı.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Gönder',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Dosya yok',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Yukarı Taşı',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Aşağı taşı',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Yükleniyor...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Daha fazla yükle',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$4 = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Lütfen ${name}'yi kabul edin.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} ${date(args[0])}'den sonra olmalıdır.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} gelecekte bir zaman olmalıdır.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} sadece alfabetik karakterler içerebilir.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} sadece alfabetik karakterler ve sayı içerebilir.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} yalnızca harf ve boşluk içerebilir.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} ${date(args[0])} tarihinden önce olmalı.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} geçmişte olmalı.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Alan yanlış yapılandırılmış ve gönderilemez.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} ${a} ve ${b} aralığında olmalı.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} eşleşmiyor.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} geçerli bir tarih değil, lütfen ${args[0]} biçimini kullanın.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Alan yanlış yapılandırılmış ve gönderilemez.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)}, ${date(args[0])} ve ${date(args[1])} aralığında olmalı.`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Lütfen geçerli bir e-mail adresi girin.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} ${list(args)} ile bitmiyor.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} izin verilen bir değer değil.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} en azından bir karakter uzunluğunda olmalı.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} ${max}'e eşit veya daha küçük olmalı.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} ${max} karakter uzunluğunda olmalıdır.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} ${min}'e eşit veya daha büyük olmalı.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)}, ${min} ve ${max} karakter uzunluğu aralığında olmalı.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} izin verilen bir değer değil.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `${name}'in uzunluğu ${args[0]}'dan daha uzun olamaz.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} en azından ${args[0]} uzunluğunda veya ona eşit olmalı.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Hiçbir dosya türüne izin verilmez.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} şu tiplerden biri olmalı: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `${name}'in uzunluğu ${args[0]}'dan daha kısa olamaz.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} en azından ${args[0]} uzunluğunda olmalı.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” ${name} olamaz.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} sayı olmalı.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} gerekli.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} ${list(args)} ile başlamıyor.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Lütfen geçerli bir url dahil edin.`;
        /* </i18n> */
    },
};

var tr = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$4,
    validation: validation$4
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$3 = {
    /**
     * Shown on a button for adding additional items.
     */
    add: 'Додати',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Видалити',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Видалити все',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Вибачте, не всі поля заповнені правильно.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Відправити',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Файл не вибрано',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Рухатися вгору',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Пересунути вниз',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Завантаження...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Завантажте більше',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$3 = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Будь ласка, прийміть ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `Дата ${sentence(name)} повинна бути пізніше за ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `Дата ${sentence(name)} має бути в майбутньому.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `Поле ${sentence(name)} може містити лише літери.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `Поле ${sentence(name)} може містити лише літери та цифри.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `Поле ${sentence(name)} може містити лише літери та пробіли.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `Дата ${sentence(name)} повинна бути раніше за ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `Дата ${sentence(name)} повинна бути в минулому.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Це поле заповнено неправильно і не може бути надіслано.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `Поле ${sentence(name)} повинно бути між ${a} та ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `Поле ${sentence(name)} не збігається.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `Поле ${sentence(name)} має неправильну дату. Будь ласка, використовуйте формат ${args[0]}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Це поле заповнено неправильно і не може бути надіслано.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `Дата ${sentence(name)} повинна бути між ${date(args[0])} та ${date(args[1])}.`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Будь ласка, введіть дійсну електронну адресу.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `Поле ${sentence(name)} не повинно закінчуватися на ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `Поле ${sentence(name)} має неприпустиме значення.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `Поле ${sentence(name)} має містити щонайменше один символ.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `Довжина поля ${sentence(name)} повинна бути меншою або дорівнювати ${max} символам.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} має бути довжиною ${max} символів.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `Довжина поля ${sentence(name)} повинна бути більшою або дорівнювати ${min} символам.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `Довжина поля ${sentence(name)} повинна бути між ${min} та ${max} символами.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `Поле ${sentence(name)} має неприпустиме значення.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `Не може бути вибрано більше ніж ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `Поле ${sentence(name)} має бути менше або дорівнювати ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Не вказано дозволені типи файлів.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `Тип файлу в полі ${sentence(name)} має бути: ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `Не може бути вибрано менше ніж ${args[0]} ${name}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `Поле ${sentence(name)} має бути не менше ніж ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}” не дозволено в полі ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `Поле ${sentence(name)} має бути числом.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `Поле ${sentence(name)} є обов'язковим.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `Поле ${sentence(name)} має починатися з ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Будь ласка, введіть дійсну URL-адресу.`;
        /* </i18n> */
    },
};

var uk = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$3,
    validation: validation$3
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$2 = {
    /**
     * Shown on a button for adding additional items.
     */
    add: "Qo'shish",
    /**
     * Shown when a button to remove items is visible.
     */
    remove: "O'chirish",
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: "Hammasini o'chirish",
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: "Kechirasiz, barcha maydonlar to'g'ri to'ldirilmagan.",
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Yuborish',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Hech qanday fayl tanlanmagan',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Yuqoriga ko’taring',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Pastga siljish',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Yuklanmoqda...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Ko’proq yuklang',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$2 = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `${name} ni qabul qiling.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} ${date(args[0])} dan keyin bo'lishi kerak.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} kelajakda bo'lishi kerak.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} faqat alifbo tartibidagi belgilardan iborat bo'lishi mumkin.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} faqat harflar va raqamlardan iborat bo'lishi mumkin.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} faqat harf va bo'shliqlardan iborat bo'lishi mumkin.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} ${date(args[0])} dan oldin bo'lishi kerak`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} o'tmishda bo'lishi kerak.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Bu maydon noto'g'ri sozlangan va uni yuborib bo'lmaydi.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} ${a} va ${b} orasida bo'lishi kerak.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} mos emas.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} haqiqiy sana emas, iltimos ${args[0]} formatidan foydalaning`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return "Bu maydon noto'g'ri sozlangan va uni yuborib bo'lmaydi";
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} ${date(args[0])} va ${date(args[1])} oralig'ida bo'lishi kerak`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Iltimos amaldagi e-mail manzilingizni kiriting.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} ${list(args)} bilan tugamaydi.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} ruxsat etilgan qiymat emas.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} kamida bitta belgidan iborat bo'lishi kerak.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} ${max} ta belgidan kam yoki teng bo'lishi kerak.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} bo'lishi kerak ${max} belgilar uzun.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} ${min} ta belgidan ko'p yoki teng bo'lishi kerak.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} ${min} va ${max} gacha belgilardan iborat bo'lishi kerak.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} ruxsat etilgan qiymat emas.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `${args[0]} ${name} dan ortiq bo'lishi mumkin emas.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} ${args[0]} dan kichik yoki teng bo'lishi kerak.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Fayl formatlariga ruxsat berilmagan.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} quyidagi turdagi bo'lishi kerak: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `${args[0]} ${name} dan kam bo'lmasligi kerak.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} kamida ${args[0]} bo'lishi kerak.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `"${value}" ruxsat berilmagan ${name}.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} raqam bo'lishi kerak.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} talab qilinadi.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} ${list(args)} bilan boshlanmaydi.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `URL emas`;
        /* </i18n> */
    },
};

var uz = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$2,
    validation: validation$2
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui$1 = {
    /**
     * Shown on buttons for adding new items.
     */
    add: 'Thêm',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: 'Xoá',
    /**
     * Shown when there are multiple items to remove at the same time.
     */
    removeAll: 'Xoá tất cả',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: 'Xin lỗi, không phải tất cả các trường đều được nhập đúng.',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: 'Gửi',
    /**
     * Shown when no files are selected.
     */
    noFiles: 'Chưa chọn file',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: 'Di chuyển lên',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: 'Di chuyển xuống',
    /**
     * Shown when something is actively loading.
     */
    isLoading: 'Đang tải...',
    /**
     * Shown when there is more to load.
     */
    loadMore: 'Tải thêm',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation$1 = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `Hãy đồng ý với ${name}.`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)} phải sau ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} phải trong tương lai.`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)} có thể chỉ bao gồm các chữ cái alphabet.`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)} có thể chỉ bao gồm các chữ cái và chữ số.`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)} chỉ có thể chứa các chữ cái và khoảng trắng.`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)} phải trước ${date(args[0])}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)} phải trong quá khứ.`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `Trường này đã được thiết lập sai và không thể gửi.`;
            /* </i18n> */
        }
        const [a, b] = order(args[0], args[1]);
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)} phải ở giữa ${a} và ${b}.`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)} không khớp.`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)} không phải ngày hợp lệ, hãy sử dụng định dạng ${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return 'Trường này đã được thiết lập sai và không thể gửi.';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)} phải ở giữa khoảng từ ${date(args[0])} đến ${date(args[1])}.`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: 'Hãy nhập một địa chỉ email hợp lệ.',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)} không kết thúc với ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)} không phải một giá trị được cho phép.`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = Number(first) <= Number(second) ? first : second;
        const max = Number(second) >= Number(first) ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)} phải có độ dài tối thiểu một ký tự.`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)} phải có độ dài tối đa ${max} ký tự.`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} nên dài ${max} ký tự.`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)} phải có độ dài tối thiểu ${min} ký tự.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)} phải có độ dài tối đa trong khoảng từ ${min} đến ${max} ký tự.`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)} không phải một giá trị được cho phép.`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `${name} không thể lớn hơn ${args[0]}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)} phải tối đa bằng ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return 'Định dạng tệp tin này không được phép.';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)} phải là một trong các dạng: ${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `${name} không thể nhỏ hơn ${args[0]}.`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)} phải tối thiểu bằng ${args[0]}.`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `"${value}" không phải giá trị ${name} được phép.`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)} phải là một số.`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)} là bắt buộc.`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)} không bắt đầu với ${list(args)}.`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `Hãy nhập một URL hợp lệ.`;
        /* </i18n> */
    },
};

var vi = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui$1,
    validation: validation$1
});

/**
 * Here we can import additional helper functions to assist in formatting our
 * language. Feel free to add additional helper methods to libs/formats if it
 * assists in creating good validation messages for your locale.
 */
/**
 * Standard language for interface features.
 * @public
 */
const ui = {
    /**
     * Shown on buttons for adding new items.
     */
    add: '添加',
    /**
     * Shown when a button to remove items is visible.
     */
    remove: '移除',
    /**
     * Shown when all fields are not filled out correctly.
     */
    incomplete: '抱歉，有些字段未被正确填写',
    /**
     * Shown in a button inside a form to submit the form.
     */
    submit: '提交',
    /**
     * Shown on buttons that move fields up in a list.
     */
    moveUp: '向上移动',
    /**
     * Shown on buttons that move fields down in a list.
     */
    moveDown: '向下移动',
    /**
     * Shown when something is actively loading.
     */
    isLoading: '正在加载...',
    /**
     * Shown when there is more to load.
     */
    loadMore: '加载更多',
};
/**
 * These are all the possible strings that pertain to validation messages.
 * @public
 */
const validation = {
    /**
     * The value is not an accepted value.
     * @see {@link https://docs.formkit.com/essentials/validation#accepted}
     */
    accepted({ name }) {
        /* <i18n case="Shown when the user-provided value is not a valid 'accepted' value."> */
        return `请接受${name}`;
        /* </i18n> */
    },
    /**
     * The date is not after
     * @see {@link https://docs.formkit.com/essentials/validation#date-after}
     */
    date_after({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not after the date supplied to the rule."> */
            return `${sentence(name)}必须晚于${date(args[0])}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not after today's date, since no date was supplied to the rule."> */
        return `${sentence(name)}必须是未来的日期`;
        /* </i18n> */
    },
    /**
     * The value is not a letter.
     * @see {@link https://docs.formkit.com/essentials/validation#alpha}
     */
    alpha({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical characters."> */
        return `${sentence(name)}仅能包含字母字符`;
        /* </i18n> */
    },
    /**
     * The value is not alphanumeric
     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}
     */
    alphanumeric({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphanumeric characters."> */
        return `${sentence(name)}仅能包含字母和数字`;
        /* </i18n> */
    },
    /**
     * The value is not letter and/or spaces
     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}
     */
    alpha_spaces({ name }) {
        /* <i18n case="Shown when the user-provided value contains non-alphabetical and non-space characters."> */
        return `${sentence(name)}只能包含字母和空格`;
        /* </i18n> */
    },
    /**
     * The date is not before
     * @see {@link https://docs.formkit.com/essentials/validation#date-before}
     */
    date_before({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date is not before the date supplied to the rule."> */
            return `${sentence(name)}必须早于${date(args[0])}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided date is not before today's date, since no date was supplied to the rule."> */
        return `${sentence(name)}必须是过去的日期`;
        /* </i18n> */
    },
    /**
     * The value is not between two numbers
     * @see {@link https://docs.formkit.com/essentials/validation#between}
     */
    between({ name, args }) {
        if (isNaN(args[0]) || isNaN(args[1])) {
            /* <i18n case="Shown when any of the arguments supplied to the rule were not a number."> */
            return `该字段未被正确设置而无法被提交`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is not between two numbers."> */
        return `${sentence(name)}必须在${args[0]}和${args[1]}之间`;
        /* </i18n> */
    },
    /**
     * The confirmation field does not match
     * @see {@link https://docs.formkit.com/essentials/validation#confirm}
     */
    confirm({ name }) {
        /* <i18n case="Shown when the user-provided value does not equal the value of the matched input."> */
        return `${sentence(name)}不匹配`;
        /* </i18n> */
    },
    /**
     * The value is not a valid date
     * @see {@link https://docs.formkit.com/essentials/validation#date-format}
     */
    date_format({ name, args }) {
        if (Array.isArray(args) && args.length) {
            /* <i18n case="Shown when the user-provided date does not satisfy the date format supplied to the rule."> */
            return `${sentence(name)}不是一个合法日期，请使用此格式${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when no date argument was supplied to the rule."> */
        return '该字段未被正确设置而无法被提交';
        /* </i18n> */
    },
    /**
     * Is not within expected date range
     * @see {@link https://docs.formkit.com/essentials/validation#date-between}
     */
    date_between({ name, args }) {
        /* <i18n case="Shown when the user-provided date is not between the start and end dates supplied to the rule. "> */
        return `${sentence(name)}必须在${date(args[0])}和${date(args[1])}之间`;
        /* </i18n> */
    },
    /**
     * Shown when the user-provided value is not a valid email address.
     * @see {@link https://docs.formkit.com/essentials/validation#email}
     */
    email: '请输入一个合法的电子邮件地址',
    /**
     * Does not end with the specified value
     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}
     */
    ends_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not end with the substring supplied to the rule."> */
        return `${sentence(name)}并未以${list(args)}结尾`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#is}
     */
    is({ name }) {
        /* <i18n case="Shown when the user-provided value is not one of the values supplied to the rule."> */
        return `${sentence(name)}不是一个允许值`;
        /* </i18n> */
    },
    /**
     * Does not match specified length
     * @see {@link https://docs.formkit.com/essentials/validation#length}
     */
    length({ name, args: [first = 0, second = Infinity] }) {
        const min = first <= second ? first : second;
        const max = second >= first ? second : first;
        if (min == 1 && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is not at least one character."> */
            return `${sentence(name)}至少要有一个字符`;
            /* </i18n> */
        }
        if (min == 0 && max) {
            /* <i18n case="Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule."> */
            return `${sentence(name)}必须少于或等于${max}个字符`;
            /* </i18n> */
        }
        if (min === max) {
            /* <i18n case="Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule."> */
            return `${sentence(name)} 的长度应为 ${max} 个字符。`;
            /* </i18n> */
        }
        if (min && max === Infinity) {
            /* <i18n case="Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule."> */
            return `${sentence(name)}必须多于或等于${min}个字符`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the length of the user-provided value is between the two lengths supplied to the rule."> */
        return `${sentence(name)}必须有${min}至${max}个字符`;
        /* </i18n> */
    },
    /**
     * Value is not a match
     * @see {@link https://docs.formkit.com/essentials/validation#matches}
     */
    matches({ name }) {
        /* <i18n case="Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. "> */
        return `${sentence(name)}不是一个允许值`;
        /* </i18n> */
    },
    /**
     * Exceeds maximum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#max}
     */
    max({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is longer than the max supplied to the rule."> */
            return `${name}不能超过${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is greater than the maximum number supplied to the rule."> */
        return `${sentence(name)}必须小于或等于${args[0]}`;
        /* </i18n> */
    },
    /**
     * The (field-level) value does not match specified mime type
     * @see {@link https://docs.formkit.com/essentials/validation#mime}
     */
    mime({ name, args }) {
        if (!args[0]) {
            /* <i18n case="Shown when no file formats were supplied to the rule."> */
            return '无允许的文件格式';
            /* </i18n> */
        }
        /* <i18n case="Shown when the mime type of user-provided file does not match any mime types supplied to the rule."> */
        return `${sentence(name)}必须为此类型：${args[0]}`;
        /* </i18n> */
    },
    /**
     * Does not fulfill minimum allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#min}
     */
    min({ name, node: { value }, args }) {
        if (Array.isArray(value)) {
            /* <i18n case="Shown when the length of the array of user-provided values is shorter than the min supplied to the rule."> */
            return `${name}不能少于${args[0]}`;
            /* </i18n> */
        }
        /* <i18n case="Shown when the user-provided value is less than the minimum number supplied to the rule."> */
        return `${sentence(name)}不能小于${args[0]}`;
        /* </i18n> */
    },
    /**
     * Is not an allowed value
     * @see {@link https://docs.formkit.com/essentials/validation#not}
     */
    not({ name, node: { value } }) {
        /* <i18n case="Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule."> */
        return `“${value}”不是一个被允许的${name}`;
        /* </i18n> */
    },
    /**
     *  Is not a number
     * @see {@link https://docs.formkit.com/essentials/validation#number}
     */
    number({ name }) {
        /* <i18n case="Shown when the user-provided value is not a number."> */
        return `${sentence(name)}必须是一个数字`;
        /* </i18n> */
    },
    /**
     * Required field.
     * @see {@link https://docs.formkit.com/essentials/validation#required}
     */
    required({ name }) {
        /* <i18n case="Shown when a user does not provide a value to a required input."> */
        return `${sentence(name)}必须填写`;
        /* </i18n> */
    },
    /**
     * Does not start with specified value
     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}
     */
    starts_with({ name, args }) {
        /* <i18n case="Shown when the user-provided value does not start with the substring supplied to the rule."> */
        return `${sentence(name)}没有以${list(args)}开头`;
        /* </i18n> */
    },
    /**
     * Is not a url
     * @see {@link https://docs.formkit.com/essentials/validation#url}
     */
    url() {
        /* <i18n case="Shown when the user-provided value is not a valid url."> */
        return `请包含一个合法的url`;
        /* </i18n> */
    },
};

var zh = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ui: ui,
    validation: validation
});

/**
 * Create a new internationalization plugin for FormKit.
 * @param locales - Creates the i18n plugin.
 * @public
 */
function createI18nPlugin(registry) {
    return function i18nPlugin(node) {
        let localeKey = parseLocale(node.config.locale, registry);
        let locale = localeKey ? registry[localeKey] : {};
        /* If the locale prop changes, update the active locale */
        node.on('prop:locale', ({ payload: lang }) => {
            localeKey = parseLocale(lang, registry);
            locale = localeKey ? registry[localeKey] : {};
            // Run through all the messages in the store and update with new locale
            node.store.touch();
        });
        node.on('prop:label', () => node.store.touch());
        node.on('prop:validationLabel', () => node.store.touch());
        /**
         * Hook into the core text or t() hook to perform localization on the
         * output of core functionality.
         */
        node.hook.text((fragment, next) => {
            var _a, _b;
            const key = ((_a = fragment.meta) === null || _a === void 0 ? void 0 : _a.messageKey) || fragment.key;
            if (has(locale, fragment.type) && has(locale[fragment.type], key)) {
                const t = locale[fragment.type][key];
                if (typeof t === 'function') {
                    fragment.value = Array.isArray((_b = fragment.meta) === null || _b === void 0 ? void 0 : _b.i18nArgs)
                        ? t(...fragment.meta.i18nArgs) // eslint-disable-line @typescript-eslint/no-non-null-assertion
                        : t(fragment);
                }
                else {
                    fragment.value = t;
                }
            }
            return next(fragment);
        });
    };
}
/**
 * @param locale - An ISO 639-1 and (optionally) ISO 639-2 language tag. For
 * example these are valid locale keys:
 * zh
 * zh-CN
 * zh-HK
 * en
 * en-GB
 * @param availableLocales - An array of locales that may be valid.
 */
function parseLocale(locale, availableLocales) {
    if (has(availableLocales, locale)) {
        return locale;
    }
    const [lang] = locale.split('-');
    if (has(availableLocales, lang)) {
        return lang;
    }
    for (const locale in availableLocales) {
        return locale;
    }
    return false;
}

/**
 * Export all the available locales at once.
 * @public
 */
const locales = {
    ar,
    az,
    bg,
    cs,
    da,
    de,
    el,
    en,
    es,
    fa,
    fi,
    fr,
    fy,
    he,
    hr,
    hu,
    id,
    it,
    ja,
    kk,
    ko,
    nb,
    nl,
    pl,
    pt,
    ro,
    ru,
    sk,
    sl,
    sr,
    sv,
    tg,
    th,
    tr,
    uk,
    uz,
    vi,
    zh,
};

export { ar, az, bg, createI18nPlugin, cs, da, date, de, el, en, es, fa, fi, fr, fy, he, hr, hu, id, it, ja, kk, ko, list, locales, nb, nl, order, pl, pt, ro, ru, sentence, sk, sl, sr, sv, tg, th, tr, uk, uz, vi, zh };
