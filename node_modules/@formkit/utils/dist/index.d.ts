/**
 * Performs a recursive Object.assign like operation.
 * @param a - An object to be extended by object b
 * @param b - An object to copy values from
 * @public
 */
export declare function assignDeep<A extends Record<PropertyKey, any>, B extends Record<PropertyKey, any>>(a: A, b: B): A & B;

/**
 * This converts kebab-case to camelCase. It ONLY converts from kebab for
 * efficiency stake.
 * @param str - String to convert.
 * @public
 */
export declare function camel(str: string): string;

/**
 * Perform a recursive clone on a given object. This only intended to be used
 * for simple objects like arrays and pojos.
 * @param obj - Object to clone
 * @public
 */
export declare function clone<T extends Record<string, unknown> | unknown[] | null>(obj: T, explicit?: string[]): T;

/**
 * Clones anything. If the item is scalar, no worries, it passes it back. if it
 * is an object, it performs a (fast/loose) clone operation.
 * @param obj - The object to clone
 * @public
 */
export declare function cloneAny<T>(obj: T): T;

/**
 * Given 2 arrays, return them as a combined array with no duplicates.
 * @param arr1 -
 * @param arr2 -
 * @returns any[]
 * @public
 */
export declare function dedupe<T extends any[] | Set<any>, X extends any[] | Set<any>>(arr1: T, arr2?: X): any[];

/**
 * Determines if a value is empty or not.
 * @param value - any type of value that could be returned by an input.
 * @public
 */
export declare function empty(value: any): boolean;

/**
 * Compare two values for equality optionally at depth.
 * @param valA - Any type of input
 * @param valB - Any type of output
 * @param deep - Indicate if we should recurse into the object
 * @param explicit - Explicit keys
 * @returns boolean
 * @public
 */
export declare function eq(valA: any, // eslint-disable-line
valB: any, // eslint-disable-line
deep?: boolean, explicit?: string[]): boolean;

/**
 * Escape a string for use in regular expressions.
 * @param string - The string to escape.
 * @public
 */
export declare function escapeExp(string: string): string;

/**
 * Return a new (shallow) object with all properties from a given object
 * that are present in the array.
 * @param obj - An object to clone
 * @param toRemove - An array of keys to remove
 * @public
 */
export declare function except(obj: Record<string, any>, toRemove: Array<string | RegExp>): Record<string, any>;

/**
 * Recursively merge data from additional into original returning a new object.
 * @param original - An object to extend
 * @param additional - An object to modify the original object with.
 * @param arrays - By default replaces arrays, but can also append to them.
 * @param ignoreUndefined - when true it treats undefined values as if they dont exist
 * @public
 */
export declare function extend(original: Record<string, any>, additional: Record<string, any> | string | null, extendArrays?: boolean, ignoreUndefined?: boolean): Record<string, any> | string | null;

/**
 * The date token strings that can be used for date formatting.
 * @public
 */
export declare type FormKitDateTokens = 'MM' | 'M' | 'DD' | 'D' | 'YYYY' | 'YY';

/**
 * Get a specific value via dot notation.
 * @param obj - An object to fetch data from
 * @param addr - An "address" in dot notation
 * @public
 */
export declare function getAt(obj: any, addr: string): unknown;

/**
 * Checks if the given property exists on the given object.
 * @param obj -
 * @param property -
 * @public
 */
export declare function has(obj: {
    [index: string]: any;
    [index: number]: any;
}, property: string | symbol | number): boolean;

/**
 * Defines an object as an initial value.
 * @param obj - Object
 * @returns
 * @public
 */
export declare function init<T extends object>(obj: T): T & {
    __init?: true;
};

/**
 * Checks if an object is a simple array or record.
 * @param o - A value to check
 * @returns
 * @public
 */
export declare function isObject(o: unknown): o is Record<PropertyKey, unknown> | unknown[];

/**
 * Attempts to determine if an object is a plain object. Mostly lifted from
 * is-plain-object: https://github.com/jonschlinkert/is-plain-object
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * @param o - any value
 * @returns
 * @public
 */
export declare function isPojo(o: any): o is Record<string, any>;

/**
 * Determine if the given string is fully quoted. Examples:
 * hello - false
 * "hello" - true
 * 'world' - true
 * "hello"=="world" - false
 * "hello'this'" - false
 * "hello"'there' - false
 * "hello""there" - false
 * 'hello === world' - true
 * @param str - A string to check.
 * @public
 */
export declare function isQuotedString(str: string): boolean;

/**
 * Determines if an object is an object or not.
 * @param o - any value
 * @returns
 * @public
 */
export declare function isRecord(o: unknown): o is Record<PropertyKey, unknown>;

/**
 * This converts camel-case to kebab case. It ONLY converts from camel to kebab.
 * @param str - Converts camel to kebab
 * @returns
 * @public
 */
export declare function kebab(str: string): string;

/**
 * Filters out values from an object that should not be considered "props" of
 * a core node, like "value" and "name".
 * @param attrs - An object to extract core node config from.
 * @public
 */
export declare function nodeProps(...sets: Array<Record<string, any>>): Record<string, any>;

/**
 * Given a FormKit input type
 * @param type - Any FormKit input type
 * @public
 */
export declare function nodeType(type: string): 'list' | 'group' | 'input';

/**
 * Extracts a set of keys from a given object. Importantly, this will extract
 * values even if they are not set on the original object they will just have an
 * undefined value.
 * @param obj - An object to extract values from
 * @param include - A set of keys to extract
 * @returns
 * @public
 */
export declare function only(obj: Record<string, any>, include: Array<string | RegExp>): Record<string, any>;

/**
 * Parse a string for comma-separated arguments
 * @param str - A string to parse
 * @public
 */
export declare function parseArgs(str: string): string[];

/**
 * Given a string format (date) return a regex to match against.
 * @param format - The format of the string
 * @returns
 * @public
 */
export declare function regexForFormat(format: string): RegExp;

/**
 * Remove extra escape characters.
 * @param str - A string to remove escape characters from.
 * @public
 */
export declare function rmEscapes(str: string): string;

/**
 * Creates a new set of the specified type and uses the values from an Array or
 * an existing Set.
 * @param items -
 * @returns Set
 * @public
 */
export declare function setify<T>(items: Set<T> | T[] | null | undefined): Set<T>;

/**
 * Very shallowly clones the given object.
 * @param obj - The object to shallow clone
 * @returns
 * @public
 */
export declare function shallowClone<T>(obj: T, explicit?: string[]): T;

/**
 * Turn any string into a URL/DOM safe string.
 * @public
 */
export declare function slugify(str: string): string;

/**
 * Spreads an object or an array, otherwise returns the same value.
 * @param obj - Any value, but will spread objects and arrays
 * @public
 */
export declare function spread<T>(obj: T, explicit?: string[]): T;

/**
 * Generates a random string.
 * @returns string
 * @public
 */
export declare function token(): string;

/**
 * Determines if the value of a prop that is either present (true) or not
 * present (undefined). For example the prop disabled should disable
 * by just existing, but what if it is set to the string "false" â€” then it
 * should not be disabled.
 * @param value - value to be checked
 * @returns
 * @public
 */
export declare function undefine(value: unknown): true | undefined;

export { }
