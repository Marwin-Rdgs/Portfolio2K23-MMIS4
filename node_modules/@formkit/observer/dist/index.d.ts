import { FormKitEventListener } from '@formkit/core';
import { FormKitNode } from '@formkit/core';

/**
 * Given two maps (toAdd and toRemove) apply the dependencies as event listeners
 * on the underlying nodes.
 * @param node - The node to apply dependencies to
 * @param delta - The toAdd and toRemove dependency Maps
 * @public
 */
export declare function applyListeners(node: FormKitObservedNode, [toAdd, toRemove]: [FormKitDependencies, FormKitDependencies], callback: FormKitEventListener): void;

/**
 * The FormKitNode to observe.
 * @param node - Any formkit node to observe.
 * @returns
 * @public
 */
export declare function createObserver(node: FormKitNode, dependencies?: FormKitDependencies): FormKitObservedNode;

/**
 * Determines which nodes should be added as dependencies and which should be
 * removed.
 * @param previous - The previous watcher dependencies
 * @param current - The new/current watcher dependencies
 * @returns
 * @public
 */
export declare function diffDeps(previous: FormKitDependencies, current: FormKitDependencies): [FormKitDependencies, FormKitDependencies];

/**
 * The dependent nodes and the events that are required to watch for changes.
 * @internal
 */
export declare type FormKitDependencies = Map<FormKitNode, Set<string>> & {
    active?: boolean;
};

/**
 * An API compatible FormKitNode that is able to determine the full dependency
 * tree of nodes and their values.
 * @public
 */
export declare interface FormKitObservedNode extends FormKitNode {
    deps: FormKitDependencies;
    kill: () => void;
    observe: () => void;
    receipts: FormKitObserverReceipts;
    stopObserve: () => FormKitDependencies;
    watch: (block: FormKitWatchable) => void;
}

/**
 * A Map of nodes with the values being Maps of eventsName: receipt
 * @internal
 */
declare type FormKitObserverReceipts = Map<FormKitNode, {
    [index: string]: string;
}>;

/**
 * A callback to watch for nodes.
 * @public
 */
export declare interface FormKitWatchable {
    (node: FormKitObservedNode): any;
}

/**
 * Checks if the given noe is revoked.
 * @param node - Any observed node to check.
 * @returns
 * @public
 */
export declare function isKilled(node: FormKitObservedNode): boolean;

/**
 * Remove all the receipts from the observed node and subtree.
 * @param receipts - The formkit observer receipts to remove
 * @public
 */
export declare function removeListeners(receipts: FormKitObserverReceipts): void;

export { }
