import { AllowedComponentProps } from 'vue';
import { clearErrors } from '@formkit/core';
import { Component } from 'vue';
import { ComponentCustomProps } from 'vue';
import { ComponentOptionsMixin } from 'vue';
import { DefineComponent } from 'vue';
import { errorHandler } from '@formkit/core';
import { ExtractPropTypes } from 'vue';
import { FormKitClasses } from '@formkit/core';
import { FormKitConfig } from '@formkit/core';
import { FormKitIconLoader } from '@formkit/themes';
import { FormKitIconLoaderUrl } from '@formkit/themes';
import { FormKitLibrary } from '@formkit/core';
import { FormKitLocale } from '@formkit/i18n';
import { FormKitLocaleRegistry } from '@formkit/i18n';
import { FormKitNode } from '@formkit/core';
import { FormKitOptions } from '@formkit/core';
import { FormKitOptionsProp } from '@formkit/inputs';
import { FormKitPlugin } from '@formkit/core';
import { FormKitSchemaCondition } from '@formkit/core';
import { FormKitSchemaNode } from '@formkit/core';
import { FormKitSection } from '@formkit/inputs';
import { FormKitTypeDefinition } from '@formkit/core';
import { FormKitValidationRule } from '@formkit/validation';
import { InjectionKey } from 'vue';
import type { Plugin as Plugin_2 } from 'vue';
import { PropType } from 'vue';
import { Ref } from 'vue';
import { RendererElement } from 'vue';
import { RendererNode } from 'vue';
import { reset } from '@formkit/core';
import { resetCount } from '@formkit/core';
import { setErrors } from '@formkit/core';
import { SetupContext } from 'vue';
import { submitForm } from '@formkit/core';
import { VNode } from 'vue';
import { VNodeProps } from 'vue';

/**
 * A plugin that creates Vue-specific context object on each given node.
 * @param node - FormKitNode to create the context on.
 * @public
 */
export declare const bindings: FormKitPlugin;

export { clearErrors }

/**
 * The symbol key for accessing FormKit root configuration.
 * @public
 */
export declare const configSymbol: InjectionKey<FormKitConfig>;

/**
 * Creates a new input from schema or a Vue component with the "standard"
 * FormKit features in place such as labels, help text, validation messages, and
 * class support.
 *
 * @param schemaOrComponent - The actual schema of the input.
 * @public
 */
export declare function createInput(schemaOrComponent: FormKitSchemaNode | FormKitSection | Component, definitionOptions?: Partial<FormKitTypeDefinition>): FormKitTypeDefinition;

/**
 * Default configuration options. Includes all validation rules,
 * en i18n messages.
 * @public
 */
export declare const defaultConfig: (options?: DefaultConfigOptions) => FormKitOptions;

/**
 * The allowed options for defaultConfig.
 * @public
 */
export declare type DefaultConfigOptions = FormKitOptions & Partial<PluginConfigs> & Record<string, unknown>;

export { errorHandler }

/**
 * The root FormKit component.
 * @public
 */
export declare const FormKit: DefineComponent<    {
config: {
type: PropType<Record<string, any>>;
default: {};
};
classes: {
type: PropType<Record<string, string | Record<string, boolean> | FormKitClasses>>;
required: boolean;
};
delay: {
type: NumberConstructor;
required: boolean;
};
errors: {
type: PropType<string[]>;
default: never[];
};
inputErrors: {
type: PropType<Record<string, string[]>>;
default: () => {};
};
index: {
type: NumberConstructor;
required: boolean;
};
id: {
type: StringConstructor;
required: boolean;
};
modelValue: {
required: boolean;
};
name: {
type: StringConstructor;
required: boolean;
};
parent: {
type: PropType<FormKitNode>;
required: boolean;
};
plugins: {
type: PropType<FormKitPlugin[]>;
default: never[];
};
sectionsSchema: {
type: PropType<Record<string, FormKitSchemaCondition | Partial<FormKitSchemaNode>>>;
default: {};
};
type: {
type: PropType<string | FormKitTypeDefinition>;
default: string;
};
validation: {
type: PropType<string | [rule: string, ...args: any[]][]>;
required: boolean;
};
validationMessages: {
type: PropType<Record<string, string | ((ctx: {
node: FormKitNode;
name: string;
args: any[];
}) => string)>>;
required: boolean;
};
validationRules: {
type: PropType<Record<string, (node: FormKitNode) => boolean | Promise<boolean>>>;
required: boolean;
};
validationLabel: {
type: PropType<string | ((node: FormKitNode) => string)>;
required: boolean;
};
} & {
accept: {
type: PropType<string | undefined>;
};
actions: {
type: PropType<boolean | undefined>;
};
action: {
type: PropType<string | undefined>;
};
label: {
type: PropType<string | undefined>;
};
method: {
type: PropType<string | undefined>;
};
ignore: {
type: PropType<string | boolean | undefined>;
};
enctype: {
type: PropType<string | undefined>;
};
options: {
type: PropType<FormKitOptionsProp | undefined>;
};
help: {
type: PropType<string | undefined>;
};
min: {
type: PropType<string | number | undefined>;
};
max: {
type: PropType<string | number | undefined>;
};
step: {
type: PropType<string | number | undefined>;
};
multiple: {
type: PropType<string | boolean | undefined>;
};
disabled: {
type: PropType<string | boolean | undefined>;
};
preserve: {
type: PropType<string | boolean | undefined>;
};
preserveErrors: {
type: PropType<string | boolean | undefined>;
};
}, () => VNode<RendererNode, RendererElement, {
[key: string]: any;
}>, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
input: (_value: any, _node: FormKitNode) => true;
inputRaw: (_value: any, _node: FormKitNode) => true;
'update:modelValue': (_value: any) => true;
node: (node: FormKitNode) => true;
submit: (_data: any, _node?: FormKitNode | undefined) => true;
submitRaw: (_event: Event, _node?: FormKitNode | undefined) => true;
submitInvalid: (_node?: FormKitNode | undefined) => true;
}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<    {
config: {
type: PropType<Record<string, any>>;
default: {};
};
classes: {
type: PropType<Record<string, string | Record<string, boolean> | FormKitClasses>>;
required: boolean;
};
delay: {
type: NumberConstructor;
required: boolean;
};
errors: {
type: PropType<string[]>;
default: never[];
};
inputErrors: {
type: PropType<Record<string, string[]>>;
default: () => {};
};
index: {
type: NumberConstructor;
required: boolean;
};
id: {
type: StringConstructor;
required: boolean;
};
modelValue: {
required: boolean;
};
name: {
type: StringConstructor;
required: boolean;
};
parent: {
type: PropType<FormKitNode>;
required: boolean;
};
plugins: {
type: PropType<FormKitPlugin[]>;
default: never[];
};
sectionsSchema: {
type: PropType<Record<string, FormKitSchemaCondition | Partial<FormKitSchemaNode>>>;
default: {};
};
type: {
type: PropType<string | FormKitTypeDefinition>;
default: string;
};
validation: {
type: PropType<string | [rule: string, ...args: any[]][]>;
required: boolean;
};
validationMessages: {
type: PropType<Record<string, string | ((ctx: {
node: FormKitNode;
name: string;
args: any[];
}) => string)>>;
required: boolean;
};
validationRules: {
type: PropType<Record<string, (node: FormKitNode) => boolean | Promise<boolean>>>;
required: boolean;
};
validationLabel: {
type: PropType<string | ((node: FormKitNode) => string)>;
required: boolean;
};
} & {
accept: {
type: PropType<string | undefined>;
};
actions: {
type: PropType<boolean | undefined>;
};
action: {
type: PropType<string | undefined>;
};
label: {
type: PropType<string | undefined>;
};
method: {
type: PropType<string | undefined>;
};
ignore: {
type: PropType<string | boolean | undefined>;
};
enctype: {
type: PropType<string | undefined>;
};
options: {
type: PropType<FormKitOptionsProp | undefined>;
};
help: {
type: PropType<string | undefined>;
};
min: {
type: PropType<string | number | undefined>;
};
max: {
type: PropType<string | number | undefined>;
};
step: {
type: PropType<string | number | undefined>;
};
multiple: {
type: PropType<string | boolean | undefined>;
};
disabled: {
type: PropType<string | boolean | undefined>;
};
preserve: {
type: PropType<string | boolean | undefined>;
};
preserveErrors: {
type: PropType<string | boolean | undefined>;
};
}>> & {
onInput?: ((_value: any, _node: FormKitNode) => any) | undefined;
onInputRaw?: ((_value: any, _node: FormKitNode) => any) | undefined;
"onUpdate:modelValue"?: ((_value: any) => any) | undefined;
onNode?: ((node: FormKitNode) => any) | undefined;
onSubmit?: ((_data: any, _node?: FormKitNode | undefined) => any) | undefined;
onSubmitRaw?: ((_event: Event, _node?: FormKitNode | undefined) => any) | undefined;
onSubmitInvalid?: ((_node?: FormKitNode | undefined) => any) | undefined;
}, {
config: Record<string, any>;
plugins: FormKitPlugin[];
type: string | FormKitTypeDefinition;
errors: string[];
inputErrors: Record<string, string[]>;
sectionsSchema: Record<string, FormKitSchemaCondition | Partial<FormKitSchemaNode>>;
}>;

/**
 * A library of components available to the schema (in addition to globally
 * registered ones)
 */
declare interface FormKitComponentLibrary {
    [index: string]: Component;
}

declare interface FormKitComponentProps {
    type?: string | FormKitTypeDefinition;
    name?: string;
    validation?: any;
    modelValue?: any;
    parent?: FormKitNode;
    errors: string[];
    inputErrors: Record<string, string | string[]>;
    index?: number;
    config: Record<string, any>;
    classes?: Record<string, string | Record<string, boolean> | FormKitClasses>;
    plugins: FormKitPlugin[];
}

/**
 * Renders an icon using the current IconLoader set at the root FormKit config
 * @public
 */
export declare const FormKitIcon: DefineComponent<    {
icon: {
type: StringConstructor;
default: string;
};
iconLoader: {
type: PropType<FormKitIconLoader>;
default: null;
};
iconLoaderUrl: {
type: PropType<(iconName: string) => string>;
default: null;
};
}, () => VNode<RendererNode, RendererElement, {
[key: string]: any;
}> | null, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<    {
icon: {
type: StringConstructor;
default: string;
};
iconLoader: {
type: PropType<FormKitIconLoader>;
default: null;
};
iconLoaderUrl: {
type: PropType<(iconName: string) => string>;
default: null;
};
}>>, {
icon: string;
iconLoader: FormKitIconLoader;
iconLoaderUrl: (iconName: string) => string;
}>;

/**
 * The FormKitSchema vue component:
 * @public
 */
export declare const FormKitSchema: DefineComponent<    {
schema: {
type: PropType<FormKitSchemaCondition | FormKitSchemaNode[]>;
required: true;
};
data: {
type: PropType<Record<string, any>>;
default: () => {};
};
library: {
type: PropType<FormKitComponentLibrary>;
default: () => {};
};
}, () => RenderableList | RenderableSlots, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<    {
schema: {
type: PropType<FormKitSchemaCondition | FormKitSchemaNode[]>;
required: true;
};
data: {
type: PropType<Record<string, any>>;
default: () => {};
};
library: {
type: PropType<FormKitComponentLibrary>;
default: () => {};
};
}>>, {
data: Record<string, any>;
library: FormKitComponentLibrary;
}>;

/**
 * The global instance of the FormKit plugin.
 * @public
 */
export declare interface FormKitVuePlugin {
    get: (id: string) => FormKitNode | undefined;
    setLocale: (locale: string) => void;
    setErrors: (formId: string, errors: string[] | Record<string, string | string[]>, inputErrors?: string[] | Record<string, string | string[]>) => void;
    clearErrors: (formId: string) => void;
    submit: (formId: string) => void;
    reset: (formId: string, resetTo?: unknown) => void;
}

/**
 * The symbol key for accessing the FormKit node options.
 * @public
 */
export declare const optionsSymbol: InjectionKey<FormKitOptions>;

/**
 * The symbol that represents the formkit parent injection value.
 * @public
 */
export declare const parentSymbol: InjectionKey<FormKitNode>;

/**
 * Create the FormKit plugin.
 * @public
 */
export declare const plugin: Plugin_2;

declare interface PluginConfigs {
    rules: Record<string, FormKitValidationRule>;
    locales: FormKitLocaleRegistry;
    inputs: FormKitLibrary;
    messages: Record<string, Partial<FormKitLocale>>;
    theme: string;
    iconLoaderUrl: FormKitIconLoaderUrl;
    iconLoader: FormKitIconLoader;
    icons: Record<string, string | undefined>;
}

/**
 * The types of values that can be rendered by Vue.
 */
declare type Renderable = null | string | number | boolean | VirtualNode;

/**
 * A list of renderable items.
 */
declare type RenderableList = Renderable | Renderable[] | (Renderable | Renderable[])[];

/**
 * A slot function that can be rendered.
 */
declare type RenderableSlot = (data?: Record<string, any>, key?: symbol) => RenderableList;

/**
 * An object of slots
 */
declare type RenderableSlots = Record<string, RenderableSlot>;

export { reset }

export { resetCount }

export { setErrors }

export { submitForm }

/**
 * A composable for creating a new FormKit node.
 * @param type - The type of node (input, group, list)
 * @param attrs - The FormKit "props" — which is really the attrs list.
 * @returns
 * @public
 */
export declare function useInput(props: FormKitComponentProps, context: SetupContext<any>, options?: FormKitOptions): FormKitNode;

/**
 * The actual signature of a VNode in Vue.
 */
declare type VirtualNode = VNode<RendererNode, RendererElement, {
    [key: string]: any;
}>;

/**
 *
 * @param obj - An object to observe at depth
 * @param callback - A callback that
 * @public
 */
export declare function watchVerbose<T extends Ref<unknown> | Record<string, any>>(obj: T, callback: (keypath: string[], value?: unknown, obj?: T) => void): void;


/**
 * Augment Vue’s globalProperties.
 * @public
 */
declare module '@vue/runtime-core' {
  export interface ComponentCustomProperties {
    $formkit: FormKitVuePlugin
  }
  export interface GlobalComponents {
    FormKit: typeof FormKit
    FormKitSchema: typeof FormKitSchema
  }
}

export { }
